/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.encrypt;

import javax.annotation.PostConstruct;

import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;
import org.jasypt.encryption.pbe.config.SimplePBEConfig;
import org.jasypt.salt.RandomSaltGenerator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

/**
 * An encryption utility that is a thin wrapper around Jasypt. The password must be configured
 * via external property file or environment variable. All other options are hard coded here.
 */
@Component
public class EncryptionUtil {

    private static final Logger LOGGER = LoggerFactory.getLogger(EncryptionUtil.class);

    private static final String ALGORITHM = "PBEWithMD5AndTripleDES";
    private static final Integer HASH_ITR = 1000;

    private transient StandardPBEStringEncryptor stringEncryptor;

    @Value("${pm.pbe.pass}")
    private transient String pbePass;

    @PostConstruct
    public void initStringEncryptor() {

        LOGGER.debug("###### begin encryption util init #####");

        if (pbePass == null) {
            // throw an exception here, the pbe password is critical.
            // we cannot encrypt any properties without it

            throw new IllegalArgumentException("Must define property pm.pbe.pass in order to load Program Management");
        }

        stringEncryptor = new StandardPBEStringEncryptor();

        SimplePBEConfig config = new SimplePBEConfig();
        config.setAlgorithm(ALGORITHM);
        config.setPassword(pbePass);
        config.setSaltGenerator(new RandomSaltGenerator());
        config.setKeyObtentionIterations(HASH_ITR);

        stringEncryptor.setConfig(config);

        stringEncryptor.initialize();

        LOGGER.debug("###### end encryption util init #####");

    }

    public String encrypt(final String plaintext) {
        return stringEncryptor.encrypt(plaintext);
    }

    public String decrypt(final String ciphertext) {
        if (ciphertext == null || ciphertext.length() <= 0) {
            return null;
        } else {
            return stringEncryptor.decrypt(ciphertext);
        }
    }

}

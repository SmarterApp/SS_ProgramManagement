/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.service.impl;

import java.util.List;
import java.util.Map;

import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.progman.domain.Component;
import org.opentestsystem.shared.progman.domain.search.ComponentSearchRequest;
import org.opentestsystem.shared.progman.persistence.ComponentRepository;
import org.opentestsystem.shared.progman.service.AssetGroupService;
import org.opentestsystem.shared.progman.service.ComponentService;
import org.opentestsystem.shared.progman.service.TenantService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import com.google.common.collect.ImmutableMap;

/**
 * Implementation of Component Service.
 */
@Service
public class ComponentServiceImpl implements ComponentService {

    @Autowired
    private transient ComponentRepository componentRepository;

    @Autowired
    private transient TenantService tenantService;

    @Autowired
    private transient AssetGroupService assetGroupService;

    private static final int ONE = 1;

    @Override
    public Component saveComponent(final Component component) {
        Component savedComponent = null;
        try {
            final boolean existingComponent = !StringUtils.isEmpty(component.getId());
            savedComponent = this.componentRepository.save(component);
            if (existingComponent) {
                this.tenantService.cascadeComponentChanges(component, true);
                this.assetGroupService.cascadeComponentChanges(component, true);
            }
        } catch (final DuplicateKeyException dke) {
            throw new LocalizedException("component.already.exists", new String[] { component.getName() }, dke);
        }
        return savedComponent;
    }

    @Override
    public Component getComponent(final String componentId) {
        return this.componentRepository.findOne(componentId);
    }

    @Override
    public void removeComponent(final String componentId) {
        final Component component = this.componentRepository.findOne(componentId);
        if (component != null) {
            this.tenantService.cascadeComponentChanges(component, false);
            this.assetGroupService.cascadeComponentChanges(component, false);
            this.componentRepository.delete(componentId);
        }
    }

    @Override
    public SearchResponse<Component> searchComponents(final ComponentSearchRequest searchRequest) {
        return this.componentRepository.search(searchRequest);
    }

    @Override
    public Component getComponentByName(final String name) {
        final Map<String, String[]> params = ImmutableMap.of(ComponentSearchRequest.COMPONENT_NAME, new String[] { name });
        final ComponentSearchRequest searchReq = new ComponentSearchRequest(params);

        final SearchResponse<Component> searchResp = this.componentRepository.search(searchReq);

        Component component = null;
        if (searchResp.getTotalCount() == ONE) {
            component = searchResp.getSearchResults().get(0);
        } else if (searchResp.getTotalCount() > ONE) {
            throw new LocalizedException("component.multiple.found", new String[] { name });
        }
        return component;
    }

    @Override
    public List<Component> getComponents() {
        return this.componentRepository.findAll();
    }

    public void setComponentRepository(final ComponentRepository componentRepo) {
        this.componentRepository = componentRepo;
    }

    public void setTenantService(final TenantService tenantSrvc) {
        this.tenantService = tenantSrvc;
    }

    public void setAssetGroupService(final AssetGroupService assetGrpService) {
        this.assetGroupService = assetGrpService;
    }

}

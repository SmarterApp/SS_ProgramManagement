/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.diff;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.opentestsystem.shared.progman.domain.PropertyConfigAudit;
import org.opentestsystem.shared.progman.domain.PropertyEntry;
import org.opentestsystem.shared.progman.domain.PropertyEntryDiff;
import org.opentestsystem.shared.progman.encrypt.EncryptionUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;

import com.google.common.collect.Lists;

@Component
public class DiffAuditHistory {

    private static final Logger LOGGER = LoggerFactory.getLogger(DiffAuditHistory.class);

    @Autowired
    private EncryptionUtil encryptionUtil;

    private List<PropertyEntry> getHistoricalPropertyList(final PropertyConfigAudit historyObject) {
        List<PropertyEntry> props = null;
        if (historyObject != null && historyObject.getPropertyConfig() != null) {
            props = historyObject.getPropertyConfig().getProperties();
        }
        return props;
    }

    public List<PropertyEntryDiff> diffHistory(final PropertyConfigAudit olderHistory, final PropertyConfigAudit newerHistory) {

        List<PropertyEntryDiff> diffProps = Lists.newArrayList();
        List<PropertyEntry> olderPropEntries = getHistoricalPropertyList(olderHistory);
        List<PropertyEntry> newerPropEntries = getHistoricalPropertyList(newerHistory);

        Map<String, PropertyEntry> newEntryMap = new HashMap<String, PropertyEntry>();
        if (!CollectionUtils.isEmpty(newerPropEntries)) {
            for (PropertyEntry newEntry : newerPropEntries) {
                newEntryMap.put(newEntry.getPropertyKey(), newEntry);
            }
        }

        if (!CollectionUtils.isEmpty(olderPropEntries)) {
            for (PropertyEntry olderCurEntry : olderPropEntries) {
                PropertyEntry newerCurEntry = newEntryMap.get(olderCurEntry.getPropertyKey());
                if (newerCurEntry != null) {
                    newEntryMap.remove(newerCurEntry.getPropertyKey());
                }
                diffProps.add(buildPropertyEntryDiff(olderCurEntry, newerCurEntry));
            }
        }
        // add remaining entries as new
        for (PropertyEntry newerCurEntry : newEntryMap.values()) {
            LOGGER.debug("Property copmare: More new entries than old, marking ADD");
            diffProps.add(buildPropertyEntryDiff(null, newerCurEntry));
        }

        return diffProps;
    }

    private PropertyEntryDiff buildPropertyEntryDiff(final PropertyEntry oldEntry, final PropertyEntry newEntry) {
        return new PropertyEntryDiff(oldEntry, newEntry, decryptIfPossible(oldEntry), decryptIfPossible(newEntry));
    }

    private String decryptIfPossible(final PropertyEntry inEntry) {
        String ret = "";
        if (inEntry != null && inEntry.isEncrypt()) {
            ret = encryptionUtil.decrypt(inEntry.getPropertyValue());
        }
        return ret;
    }
}

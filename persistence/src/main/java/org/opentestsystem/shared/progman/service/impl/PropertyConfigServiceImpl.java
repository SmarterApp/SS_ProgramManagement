/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.service.impl;

import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.progman.domain.PropertyConfig;
import org.opentestsystem.shared.progman.domain.PropertyConfigAudit;
import org.opentestsystem.shared.progman.domain.PropertyConfigAudit.AuditType;
import org.opentestsystem.shared.progman.domain.PropertyEntry;
import org.opentestsystem.shared.progman.domain.search.PropertyConfigSearchRequest;
import org.opentestsystem.shared.progman.persistence.PropertyConfigAuditRepository;
import org.opentestsystem.shared.progman.persistence.PropertyConfigRepository;
import org.opentestsystem.shared.progman.service.PropertyConfigService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.security.domain.SbacUser;
import org.opentestsystem.shared.security.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.stereotype.Service;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

/**
 * Implementation of PropertyConfigService interface.
 */
@Service
public class PropertyConfigServiceImpl implements PropertyConfigService {

    /**
     * Hook into the Mongo repository
     */
    @Autowired
    private transient PropertyConfigRepository propertyConfigRepository;

    @Autowired
    private transient PropertyConfigAuditRepository propertyConfigAuditRepository;

    @Autowired
    private UserService userService;

    private static final int ONE = 1;

    @Override
    public PropertyConfig savePropertyConfig(final PropertyConfig propertyConfig) {
        PropertyConfig savedConfig = null;

        try {
            savedConfig = this.propertyConfigRepository.save(propertyConfig);
        } catch (final DuplicateKeyException dke) {
            throw new LocalizedException("propertyConfig.already.exists", new String[] { }, dke);
        }
        final AuditType auditType = propertyConfig.getId() == null ? AuditType.ADD : AuditType.UPDATE;
        final SbacUser user = this.userService.getCurrentUser();
        final PropertyConfigAudit configAudit = new PropertyConfigAudit(savedConfig, auditType, user == null ? null : user.getFullName() + ":" + user.getUsername());
        this.propertyConfigAuditRepository.save(configAudit);
        return savedConfig;
    }

    @Override
    public PropertyConfig getPropertyConfig(final String configId) {
        return this.propertyConfigRepository.findOne(configId);
    }

    @Override
    public void removePropertyConfig(final String configId) {
        final PropertyConfig config = this.propertyConfigRepository.findOne(configId);
        this.propertyConfigRepository.delete(configId);
        final SbacUser user = this.userService.getCurrentUser();
        final PropertyConfigAudit configAudit = new PropertyConfigAudit(config, AuditType.DELETE, user == null ? null : user.getFullName() + ":" + user.getUsername());
        this.propertyConfigAuditRepository.save(configAudit);
    }

    @Override
    public SearchResponse<PropertyConfig> searchPropertyConfigs(final PropertyConfigSearchRequest searchRequest) {
        return this.propertyConfigRepository.search(searchRequest);
    }

    @Override
    public PropertyConfig getPropertyConfig(final String name, final String envName) {
        final Map<String, String[]> params = ImmutableMap.of("name", new String[] { name }, "envName", new String[] { envName });

        final PropertyConfigSearchRequest searchReq = new PropertyConfigSearchRequest(params);
        final SearchResponse<PropertyConfig> searchResp = this.propertyConfigRepository.search(searchReq);

        PropertyConfig response = null;
        if (searchResp.getTotalCount() == ONE) {
            response = searchResp.getSearchResults().get(0);
        } else if (searchResp.getTotalCount() > ONE) {
            throw new LocalizedException("propertyConfig.duplicate", new String[] { name, envName });
        }
        return response;
    }

    @Override
    public PropertyConfig getEffectiveProperties(final String name, final String envName, final String overlay) {
        PropertyConfig effectiveConfig = null;
        if (StringUtils.isBlank(overlay)) {
            effectiveConfig = getPropertyConfig(name, envName);
        } else {
            final PropertyConfig childProperties = getPropertyConfig(overlay, envName);
            final PropertyConfig parentProperties = getPropertyConfig(name, envName);
            final HashMap<String, PropertyEntry> effectiveProps = Maps.newHashMap();
            if (parentProperties != null) {
                for (final PropertyEntry entry : parentProperties.getProperties()) {
                    effectiveProps.put(entry.getPropertyKey(), entry);
                }
            }
            if (childProperties != null) {
                for (final PropertyEntry entry : childProperties.getProperties()) {
                    effectiveProps.put(entry.getPropertyKey(), entry);
                }
            }

            effectiveConfig = new PropertyConfig();
            effectiveConfig.setEnvName(envName);
            effectiveConfig.setName(overlay + " extends " + name);
            effectiveConfig.setProperties(Lists.newArrayList(effectiveProps.values()));
        }
        return effectiveConfig;
    }

}

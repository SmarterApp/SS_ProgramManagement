/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.service.impl;

import java.util.List;
import java.util.Map;

import org.bson.types.ObjectId;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.progman.domain.Component;
import org.opentestsystem.shared.progman.domain.Tenant;
import org.opentestsystem.shared.progman.domain.TenantType;
import org.opentestsystem.shared.progman.domain.search.TenantSearchRequest;
import org.opentestsystem.shared.progman.persistence.TenantRepository;
import org.opentestsystem.shared.progman.service.AssetGroupService;
import org.opentestsystem.shared.progman.service.TenantService;
import org.opentestsystem.shared.progman.transformer.TenantComponentTransformer;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;

import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;

/**
 * Implementation of Tenant Service.
 */
@Service
public class TenantServiceImpl implements TenantService {

    @Autowired
    private transient TenantRepository tenantRepository;

    @Autowired
    private transient AssetGroupService assetGroupService;

    @Override
    public Tenant saveTenant(final Tenant tenant) {
        Tenant savedTenant = null;
        try {
            final boolean existingTenant = !StringUtils.isEmpty(tenant.getId());

            savedTenant = this.tenantRepository.save(tenant);
            if (existingTenant) {
                this.assetGroupService.cascadeTenantChanges(tenant);
            }
        } catch (final DuplicateKeyException dke) {
            throw new LocalizedException("tenant.already.exists", new String[] { tenant.getName(), tenant.getType().toString() }, dke);
        }
        return savedTenant;
    }

    @Override
    public Tenant findyByNameAndType(final String tenantName, final TenantType type) {
        return this.tenantRepository.findByNameAndType(tenantName, type);
    }

    @Override
    public List<Tenant> findyByNameAndType(final Map<TenantType, String> searchParams) {
        return this.tenantRepository.findByNameAndType(searchParams);
    }

    @Override
    public List<Tenant> findByNameRegexOrDescriptionRegexAndType(final String name, final String description, final TenantType type, final Pageable pageable) {
        return this.tenantRepository.findByNameRegexOrDescriptionRegexAndType(buildRegEx(name), buildRegEx(description), type, pageable);
    }

    @Override
    public List<Tenant> findByComponentAndSearchVal(final String componentName, final Boolean inGoodStanding, final String searchVal, final TenantType type, final Pageable pageable) {
        return this.tenantRepository.findByComponentAndSearchVal(componentName, inGoodStanding, searchVal, type, pageable);
    }

    @Override
    public Tenant getTenant(final String tenantId) {
        return this.tenantRepository.findOne(tenantId);
    }

    @Override
    public void removeTenant(final String tenantId) {
        this.tenantRepository.delete(tenantId);
    }

    @Override
    public SearchResponse<Tenant> searchTenants(final TenantSearchRequest searchRequest) {
        return this.tenantRepository.search(searchRequest);
    }

    @Override
    public List<Tenant> getTenants() {
        return this.tenantRepository.findAll();
    }

    private static String buildRegEx(final String queryVal) {
        return queryVal == null ? "" : "^.*\\Q" + queryVal + "\\E";
    }

    @Override
    public void cascadeComponentChanges(final Component component) {
        final List<Tenant> foundTenants = this.tenantRepository.findByTenantSubscriptionsComponentId(new ObjectId(component.getId()));
        final List<Tenant> updatedTenants = Lists.newArrayList(Iterables.transform(foundTenants, new TenantComponentTransformer(component)));
        if (!CollectionUtils.isEmpty(updatedTenants)) {
            this.tenantRepository.save(updatedTenants);
        }
    }
}

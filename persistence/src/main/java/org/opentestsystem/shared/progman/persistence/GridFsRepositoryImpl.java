/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.persistence;

import static org.springframework.data.mongodb.core.query.Query.query;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

import org.bson.types.ObjectId;
import org.opentestsystem.shared.exception.LocalizedException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.gridfs.GridFsTemplate;

import com.mongodb.DBObject;
import com.mongodb.gridfs.GridFSDBFile;
import com.mongodb.gridfs.GridFSFile;

public class GridFsRepositoryImpl implements AssetGridFsRepository {

    @Autowired
    private transient GridFsTemplate gridFsTemplate;

    @Override
    public GridFSFile save(final byte[] bytes, final String filename, final DBObject metadata) {
        GridFSFile gridfsFile = null;
        try {
            ByteArrayInputStream inStream = new ByteArrayInputStream(bytes);
            gridfsFile = save(inStream, filename, metadata);
            inStream.close();
        } catch (IOException e) {
            throw new LocalizedException("asset.file.save.error", e);
        }
        return gridfsFile;
    }

    private GridFSFile save(final InputStream inputStream, final String filename, final DBObject metadata) {
        return gridFsTemplate.store(inputStream, filename, metadata);
    }

    @Override
    public GridFSDBFile getById(final String gridFsId) {
        return gridFsTemplate.findOne(buildQueryById(gridFsId));
    }

    @Override
    public void delete(final String inAssetFileGridId) {
        gridFsTemplate.delete(buildQueryById(inAssetFileGridId));
    }

    private Query buildQueryById(final String objectId) {
        return query(Criteria.where("_id").is(new ObjectId(objectId)));
    }

}

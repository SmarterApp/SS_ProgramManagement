/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.persistence;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.shared.progman.domain.Tenant;
import org.opentestsystem.shared.progman.domain.TenantType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.util.CollectionUtils;

import com.google.common.collect.Lists;

/**
 * Interface for Tenant mongoDb repository.
 */
public class TenantRepositoryImpl implements TenantRepositoryCustom {

    @Autowired
    private transient MongoOperations mongoOperations;

    public List<Tenant> findByNameAndType(final Map<TenantType, String> params) {
        List<Tenant> tenants = null;
        List<Criteria> criteriaList = Lists.newArrayList();
        for (Entry<TenantType, String> entry : params.entrySet()) {
            if (StringUtils.isNotBlank(entry.getValue())) {
                criteriaList.add(Criteria.where("type").is(entry.getKey().getTypeName()).and("name").is(entry.getValue()));
            }
        }
        if (!CollectionUtils.isEmpty(criteriaList)) {
            Query query = new Query();
            Criteria criteria = new Criteria();
            query.addCriteria(criteria.orOperator(criteriaList.toArray(new Criteria[] { })));
            tenants = mongoOperations.find(query, Tenant.class);
        }
        return tenants;
    }

    public List<Tenant> findByNameRegexOrDescriptionRegexAndType(final String name, final String description, final TenantType type, final Pageable pageable) {
        Query query = new Query();

        if (StringUtils.isNotBlank(name) || StringUtils.isNotBlank(description)) {
            query.addCriteria(buildNameOrDescriptionRegexCriteria(name, description));
        }
        if (type != null) {
            query.addCriteria(Criteria.where("type").is(type));
        }

        query.with(pageable);
        return mongoOperations.find(query, Tenant.class);
    }

    public List<Tenant> findByComponentAndSearchVal(final String componentName, final Boolean inGoodStanding, final String searchVal, final TenantType type, final Pageable pageable) {
        Query query = new Query();

        // search for tenants with the given componentName/inGoodStanding
        query.addCriteria(buildComponentCriteria(componentName, inGoodStanding));

        // if searchVal provided, filter tenants by name/description
        if (StringUtils.isNotBlank(searchVal)) {
            query.addCriteria(buildNameOrDescriptionRegexCriteria(searchVal, searchVal));
        }

        // if type provided, filter tenants by TenantType
        if (type != null) {
            query.addCriteria(Criteria.where("type").is(type));
        }

        query.with(pageable);
        return mongoOperations.find(query, Tenant.class);
    }

    private static Criteria buildComponentCriteria(final String componentName, final Boolean inGoodStanding) {
        List<Criteria> componentCriteria = new ArrayList<Criteria>();
        componentCriteria.add(Criteria.where("component.name").is(componentName));
        if (inGoodStanding != null) {
            componentCriteria.add(Criteria.where("inGoodStanding").is(inGoodStanding));
        }

        Criteria matchingCriteria = new Criteria().andOperator(componentCriteria.toArray(new Criteria[componentCriteria.size()]));
        return Criteria.where("tenantSubscriptions").elemMatch(matchingCriteria);
    }

    private static Criteria buildNameOrDescriptionRegexCriteria(final String name, final String description) {
        Criteria criteria = new Criteria();

        return criteria.orOperator(
                Criteria.where("name").regex(name, "i"),
                Criteria.where("description").regex(description, "i")
                );
    }
}

/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.transformer;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import org.junit.Test;
import org.opentestsystem.shared.progman.domain.AssetGroup;
import org.opentestsystem.shared.progman.domain.Component;

public class AssetGroupComponentTransformerTest {

    private final AssetGroupComponentTransformer transformer = new AssetGroupComponentTransformer(buildComponent("test-id", "test-component"), true);

    @Test
    public void applyTest() {
        final Component component = buildComponent("test-id", "original-component");
        final AssetGroup assetGroup = buildAssetGroup("1", component);
        final AssetGroup transformedAssetGroup = this.transformer.apply(assetGroup);

        assertThat(transformedAssetGroup.getId(), is("1"));
        assertThat(transformedAssetGroup.getComponent().getId(), is("test-id"));
        assertThat(transformedAssetGroup.getComponent().getName(), is("test-component"));
    }

    @Test
    public void applyFailureTest() {
        // null asset group
        AssetGroup transformedAssetGroup = this.transformer.apply(null);
        assertThat(transformedAssetGroup, is(nullValue()));

        // null component
        Component component = null;
        AssetGroup assetGroup = buildAssetGroup("1", component);
        transformedAssetGroup = this.transformer.apply(assetGroup);
        assertThat(transformedAssetGroup.getId(), is("1"));
        assertThat(transformedAssetGroup.getComponent(), is(nullValue()));

        // null component id
        component = buildComponent(null, "componentWithoutId");
        assetGroup = buildAssetGroup("1", component);
        transformedAssetGroup = this.transformer.apply(assetGroup);
        assertThat(transformedAssetGroup.getId(), is("1"));
        assertThat(transformedAssetGroup.getComponent(), is(not(nullValue())));
        assertThat(transformedAssetGroup.getComponent().getId(), is(nullValue()));

        // not matching component id
        component = buildComponent("abc", "normalComponent");
        assetGroup = buildAssetGroup("1", component);
        transformedAssetGroup = this.transformer.apply(assetGroup);
        assertThat(transformedAssetGroup.getId(), is("1"));
        assertThat(transformedAssetGroup.getComponent().getId(), is("abc"));
        assertThat(transformedAssetGroup.getComponent().getName(), is("normalComponent"));
    }

    private static Component buildComponent(final String id, final String name) {
        final Component component = new Component();
        component.setId(id);
        component.setName(name);
        return component;
    }

    private static AssetGroup buildAssetGroup(final String id, final Component component) {
        final AssetGroup assetGroup = new AssetGroup();
        assetGroup.setId(id);
        assetGroup.setComponent(component);
        return assetGroup;
    }
}

/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.opentestsystem.shared.progman.domain.PropertyConfig;
import org.opentestsystem.shared.progman.domain.PropertyEntry;
import org.opentestsystem.shared.progman.domain.search.PropertyConfigSearchRequest;
import org.opentestsystem.shared.progman.service.PropertyConfigService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;

import com.google.common.collect.Maps;

/**
 * Verifications that encryption and decryption occur for PropertyConfigService
 */
@ContextConfiguration(locations = { "classpath:aop-context.xml" })
public class PropertyConfigServiceEncryptTest extends AbstractPersistenceEmbeddedTest {

    private static final String DEV = "DEV";
    private static final String TEST_SFTP_NAME = "Test Sftp Configuration";
    private static final String TESTKEY1 = "testkey1";
    private static final String TESTKEY2 = "testkey2";
    private static final String TESTVALUE2 = "testvalue2";
    private static final String TESTVALUE1 = "testvalue1";

    @Autowired
    private PropertyConfigService propertyConfigService;

    @Test
    public void testEncrypt() {
        PropertyConfig propertyConfig = new PropertyConfig();

        propertyConfig.setName(TEST_SFTP_NAME);
        propertyConfig.setEnvName(DEV);

        PropertyEntry entry = new PropertyEntry(TESTKEY1, TESTVALUE1, false);
        PropertyEntry entry2 = new PropertyEntry(TESTKEY2, TESTVALUE2, true);

        propertyConfig.addProperty(entry);
        propertyConfig.addProperty(entry2);

        PropertyConfig returnedConfig = propertyConfigService.savePropertyConfig(propertyConfig);

        List<PropertyEntry> returnedEntries = returnedConfig.getProperties();
        for (PropertyEntry returnedEntry : returnedEntries) {
            if (TESTKEY1.equals(returnedEntry.getPropertyKey())) {
                assertThat(returnedEntry.getPropertyValue(), is(TESTVALUE1));
            } else if (TESTKEY2.equals(returnedEntry.getPropertyKey())) {
                assertThat(returnedEntry.getPropertyValue(), is(TESTVALUE2));
            }
        }

    }

    // TODO create a save test that does a direct mongo lookup to verify that the value is really encrypted

    @Test
    public void testDecrypt() {
        PropertyConfig propertyConfig = new PropertyConfig();

        propertyConfig.setName(TEST_SFTP_NAME);
        propertyConfig.setEnvName(DEV);

        PropertyEntry entry = new PropertyEntry(TESTKEY1, TESTVALUE1, false);
        PropertyEntry entry2 = new PropertyEntry(TESTKEY2, TESTVALUE2, true);

        propertyConfig.addProperty(entry);
        propertyConfig.addProperty(entry2);

        PropertyConfig returnedConfig = propertyConfigService.savePropertyConfig(propertyConfig);

        PropertyConfig decryptedConfig = propertyConfigService.getPropertyConfig(returnedConfig.getId());

        List<PropertyEntry> decryptedEntries = decryptedConfig.getProperties();
        for (PropertyEntry decryptedEntry : decryptedEntries) {
            if (TESTKEY1.equals(decryptedEntry.getPropertyKey())) {
                assertThat(decryptedEntry.getPropertyValue(), is(TESTVALUE1));
            } else if (TESTKEY2.equals(decryptedEntry.getPropertyKey())) {
                assertThat(decryptedEntry.getPropertyValue(), is(TESTVALUE2));
            }
        }

    }

    @Test
    public void testDecryptSearch() {
        PropertyConfig propertyConfig = new PropertyConfig();

        propertyConfig.setName(TEST_SFTP_NAME);
        propertyConfig.setEnvName(DEV);

        PropertyEntry entry = new PropertyEntry(TESTKEY1, TESTVALUE1, false);
        PropertyEntry entry2 = new PropertyEntry(TESTKEY2, TESTVALUE2, true);

        propertyConfig.addProperty(entry);
        propertyConfig.addProperty(entry2);

        propertyConfigService.savePropertyConfig(propertyConfig);

        // ///////////

        PropertyConfig propertyConfig2 = new PropertyConfig();

        propertyConfig2.setName("test2");
        propertyConfig2.setEnvName(DEV);

        PropertyEntry entry3 = new PropertyEntry("testkey3", "testvalue3", true);
        PropertyEntry entry4 = new PropertyEntry("testkey4", "testvalue4", false);

        propertyConfig2.addProperty(entry3);
        propertyConfig2.addProperty(entry4);

        propertyConfigService.savePropertyConfig(propertyConfig2);

        Map<String, String[]> params = Maps.newHashMap();
        params.put("envName", new String[] {DEV });

        PropertyConfigSearchRequest searchReq = new PropertyConfigSearchRequest(params);

        SearchResponse<PropertyConfig> searchResp = propertyConfigService.searchPropertyConfigs(searchReq);

        List<PropertyConfig> configs = searchResp.getSearchResults();

        for (PropertyConfig config : configs) {
            if (TEST_SFTP_NAME.equals(config.getName())) {
                List<PropertyEntry> decryptedEntries = config.getProperties();
                for (PropertyEntry decryptedEntry : decryptedEntries) {
                    if (TESTKEY1.equals(decryptedEntry.getPropertyKey())) {
                        assertThat(decryptedEntry.getPropertyValue(), is(TESTVALUE1));
                    } else if (TESTKEY2.equals(decryptedEntry.getPropertyKey())) {
                        assertThat(decryptedEntry.getPropertyValue(), is(TESTVALUE2));
                    }
                }
            } else if ("test2".equals(config.getName())) {
                List<PropertyEntry> decryptedEntries = config.getProperties();
                for (PropertyEntry decryptedEntry : decryptedEntries) {
                    if ("testkey3".equals(decryptedEntry.getPropertyKey())) {
                        assertThat(decryptedEntry.getPropertyValue(), is("testvalue3"));
                    } else if ("testkey4".equals(decryptedEntry.getPropertyKey())) {
                        assertThat(decryptedEntry.getPropertyValue(), is("testvalue4"));
                    }
                }
            }
        }
    }
}

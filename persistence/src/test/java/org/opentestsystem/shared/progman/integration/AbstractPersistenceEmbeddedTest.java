/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.integration;

import org.junit.After;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.security.domain.SbacUser;
import org.opentestsystem.shared.security.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import de.flapdoodle.embed.mongo.MongodStarter;
import de.flapdoodle.embed.mongo.config.MongodConfigBuilder;
import de.flapdoodle.embed.mongo.config.Net;
import de.flapdoodle.embed.mongo.distribution.Version;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:test-context.xml" })
public abstract class AbstractPersistenceEmbeddedTest {

    @Autowired
    protected UserService userService;

    protected boolean setUpMocks = true;

    private static final int MONGO_TEST_PORT = 55552;

    private static final String SYSTEM_INDEX_STRING = "system.indexes";

    // setup our embedded mongo once for this jvm
    static {
        try {
            MongodStarter.getDefaultInstance().prepare(new MongodConfigBuilder().version(Version.Main.PRODUCTION)
                    .net(new Net("localhost", MONGO_TEST_PORT, false)).build()).start();
        } catch (final Exception e) {
            new LocalizedException("something went wrong", e);
        }
    }

    @Autowired
    protected MongoTemplate mongoTemplate;

    @Before
    public void setUp() {
        if (this.setUpMocks) {
            final SbacUser mockUser = Mockito.mock(SbacUser.class);
            Mockito.when(mockUser.hasPermissionForTenant(Mockito.anyString(), Mockito.anyString())).thenReturn(true);
            Mockito.when(mockUser.hasPermission(Mockito.anyString())).thenReturn(true);
            Mockito.when(this.userService.getCurrentUser()).thenReturn(mockUser);
        }
    }

    @After
    public void dropCollections() {
        for (final String collectionName : this.mongoTemplate.getCollectionNames()) {
            if (!SYSTEM_INDEX_STRING.equals(collectionName)) {
                this.mongoTemplate.remove(new Query(), collectionName);
            }
        }
    }
}

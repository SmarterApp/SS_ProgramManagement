/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.shared.progman.domain.PropertyConfig;
import org.opentestsystem.shared.progman.domain.search.PropertyConfigSearchRequest;
import org.opentestsystem.shared.progman.service.PropertyConfigService;
import org.opentestsystem.shared.progman.testaop.TestAopEncryptDecryptAspect;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Maps;

/**
 * Verifications that the AOP pointcuts are valid
 */
public class PropertyConfigServiceAopTest extends AbstractPersistenceEmbeddedTest {

    private static final String DEV = "DEV";
    private static final String TEST_CONFIG = "test-config";
    private static final String TESTKEY1 = "testkey1";
    private static final String TESTVALUE1 = "testvalue1";

    @Autowired
    private PropertyConfigService propertyConfigService;

    @Autowired
    private TestAopEncryptDecryptAspect aspect;

    @Before
    public void resetAspect() {
        this.aspect.resetConfigArg();
        this.aspect.resetSearchRespArg();
        this.aspect.resetEncryptInvocations();
        this.aspect.resetDecryptInvocations();
    }

    @Test
    public void testSave() {
        final PropertyConfig propertyConfig = new PropertyConfig();

        propertyConfig.setName("Test Sftp Configuration");
        propertyConfig.setEnvName(DEV);
        propertyConfig.addProperty(TESTKEY1, TESTVALUE1);
        this.propertyConfigService.savePropertyConfig(propertyConfig);

        assertThat(this.aspect.getEncryptInvocations(), is(1));
        assertThat(this.aspect.getConfigArg(), is(propertyConfig));

    }

    @Test
    public void testGetById() {
        final PropertyConfig propertyConfig = new PropertyConfig();

        propertyConfig.setName("Test Sftp Configuration");
        propertyConfig.setEnvName(DEV);
        propertyConfig.addProperty(TESTKEY1, TESTVALUE1);
        this.propertyConfigService.savePropertyConfig(propertyConfig);

        final String configId = propertyConfig.getId();

        final PropertyConfig readObj = this.propertyConfigService.getPropertyConfig(configId);

        assertThat(this.aspect.getEncryptInvocations(), is(1));
        assertThat(this.aspect.getDecryptInvocations(), is(1));
        assertThat(this.aspect.getConfigArg(), is(readObj));
    }

    @Test
    public void testFindByNameAndEnvName() {
        final PropertyConfig propertyConfig = new PropertyConfig();

        propertyConfig.setName(TEST_CONFIG);
        propertyConfig.setEnvName(DEV);
        propertyConfig.addProperty(TESTKEY1, TESTVALUE1);
        this.propertyConfigService.savePropertyConfig(propertyConfig);

        final PropertyConfig readObj = this.propertyConfigService.getPropertyConfig(TEST_CONFIG, DEV);

        assertThat(this.aspect.getEncryptInvocations(), is(1));
        assertThat(this.aspect.getDecryptInvocations(), is(1));
        assertThat(this.aspect.getConfigArg(), is(readObj));
    }

    @SuppressWarnings("unchecked")
    @Test
    public void testFindBySearchRequest() {

        final PropertyConfig propertyConfig = new PropertyConfig();

        propertyConfig.setName(TEST_CONFIG);
        propertyConfig.setEnvName(DEV);
        propertyConfig.addProperty(TESTKEY1, TESTVALUE1);
        this.propertyConfigService.savePropertyConfig(propertyConfig);

        final Map<String, String[]> params = Maps.newHashMap();
        params.put("name", new String[] { TEST_CONFIG });
        params.put("envName", new String[] { DEV });

        final PropertyConfigSearchRequest searchReq = new PropertyConfigSearchRequest(params);

        final SearchResponse<PropertyConfig> searchResp = this.propertyConfigService.searchPropertyConfigs(searchReq);

        assertThat(this.aspect.getEncryptInvocations(), is(1));
        assertThat(this.aspect.getDecryptInvocations(), is(1));

        assertThat((SearchResponse<PropertyConfig>) this.aspect.getSearchRespArg(), is(searchResp));

    }

    /**
     * one encryption occurs to save a config, but no encryptions or decryptions should occur during remove
     */
    @Test
    public void testRemoveDoesNotTriggerAspect() {

        final PropertyConfig propertyConfig = new PropertyConfig();

        propertyConfig.setName(TEST_CONFIG);
        propertyConfig.setEnvName(DEV);
        propertyConfig.addProperty(TESTKEY1, TESTVALUE1);
        final PropertyConfig savedConfig = this.propertyConfigService.savePropertyConfig(propertyConfig);

        final String configId = savedConfig.getId();

        this.propertyConfigService.removePropertyConfig(configId);

        assertThat(this.aspect.getEncryptInvocations(), is(1));
        assertThat(this.aspect.getDecryptInvocations(), is(0));

    }
}

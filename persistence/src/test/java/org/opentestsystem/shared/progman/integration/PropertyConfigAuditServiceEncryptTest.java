/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.opentestsystem.shared.progman.domain.PropertyConfig;
import org.opentestsystem.shared.progman.domain.PropertyConfigAudit;
import org.opentestsystem.shared.progman.domain.PropertyEntry;
import org.opentestsystem.shared.progman.domain.search.PropertyConfigAuditSearchRequest;
import org.opentestsystem.shared.progman.service.PropertyConfigAuditService;
import org.opentestsystem.shared.progman.service.PropertyConfigService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;

import com.google.common.collect.Maps;

/**
 * Verifications that the AOP pointcuts are valid
 */
@ContextConfiguration(locations = {"classpath:aop-context.xml" })
public class PropertyConfigAuditServiceEncryptTest extends AbstractPersistenceEmbeddedTest {

    private static final String DEV = "DEV";

    @Autowired
    private PropertyConfigAuditService propertyConfigAuditService;

    @Autowired
    private PropertyConfigService propertyConfigService;

    private SearchResponse<PropertyConfigAudit> searchForAudits(final String configId) {
        Map<String, String[]> params = Maps.newHashMap();
        params.put(PropertyConfigAuditSearchRequest.SEARCH_FILTER_AUDITED_ID, new String[] {configId });
        PropertyConfigAuditSearchRequest search = new PropertyConfigAuditSearchRequest(params);

        return propertyConfigAuditService.getPropertyConfigAudits(search);
    }

    @Test
    public void testAuditOnCreateAndUpdate() {
        PropertyConfig propertyConfig = new PropertyConfig();

        propertyConfig.setName("Test Sftp Configuration");
        propertyConfig.setEnvName(DEV);

        PropertyEntry entry = new PropertyEntry("testkey1", "testvalue1", false);
        PropertyEntry entry2 = new PropertyEntry("testkey2", "testvalue2", true);

        propertyConfig.addProperty(entry);
        propertyConfig.addProperty(entry2);

        propertyConfigService.savePropertyConfig(propertyConfig);

        String configId = propertyConfig.getId();

        SearchResponse<PropertyConfigAudit> audits = searchForAudits(configId);

        List<PropertyConfigAudit> auditconfigs = audits.getSearchResults();

        for (PropertyConfigAudit auditconfig : auditconfigs) {
            PropertyConfig config = auditconfig.getPropertyConfig();
            List<PropertyEntry> entries = config.getProperties();
            for (PropertyEntry propentry : entries) {
                if ("testkey1".equals(propentry.getPropertyKey())) {
                    assertThat(propentry.getPropertyValue(), is("testvalue1"));
                } else if ("testkey2".equals(propentry.getPropertyKey())) {
                    assertThat(propentry.getPropertyValue(), is("testvalue2"));
                }

            }
        }

    }

}

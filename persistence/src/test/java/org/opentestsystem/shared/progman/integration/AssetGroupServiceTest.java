/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.integration;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.shared.progman.domain.AssetGroup;
import org.opentestsystem.shared.progman.domain.Component;
import org.opentestsystem.shared.progman.domain.Tenant;
import org.opentestsystem.shared.progman.domain.TenantType;
import org.opentestsystem.shared.progman.domain.search.AssetGroupSearchRequest;
import org.opentestsystem.shared.progman.service.AssetGroupService;
import org.opentestsystem.shared.progman.service.TenantService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Maps;

public class AssetGroupServiceTest extends AbstractPersistenceEmbeddedTest {

    private static final String DEFAULT_TENANT_NAME = "WISCONSIN";

    private static final String DEFAULT_COMPONENT = "2222";

    @Autowired
    private TenantService tenantService;
    private Tenant tenant;

    @Autowired
    private AssetGroupService assetGroupService;

    @Before
    public void loadTenant() {
        tenant = new Tenant();
        tenant.setName(DEFAULT_TENANT_NAME);
        tenant.setType(TenantType.STATE);
        tenant = tenantService.saveTenant(tenant);
    }

    @Test
    public void saveAssetTest() {
        AssetGroup saved = assetGroupService.saveAssetGroup(createDummyAssetGroup());
        assertNotNull("saved asset", saved);
        AssetGroup savedAsset = assetGroupService.getAssetGroup(saved.getId());
        assertNotNull("saved asset", savedAsset);
    }

    @Test
    public void searchAssetGroupTest() {
        AssetGroup assetToSave = createDummyAssetGroup();
        AssetGroup saved = assetGroupService.saveAssetGroup(assetToSave);
        assertNotNull("saved asset", saved);

        assetToSave.setComponent(buildComponent("3333", "underling"));
        assetToSave.setTenant(tenant);
        assetToSave.setId(null);
        saved = assetGroupService.saveAssetGroup(assetToSave);
        assertNotNull("saved asset", saved);

        Map<String, String[]> paramMap = Maps.newHashMap();
        paramMap.put(AssetGroupSearchRequest.SEARCH_KEY_COMPONENT_NAME, new String[] { "obviously wrong" });

        AssetGroupSearchRequest searchRequest = new AssetGroupSearchRequest(paramMap);

        SearchResponse<AssetGroup> foundAsset = assetGroupService.searchAssetGroups(searchRequest);
        assertNotNull("seach by non existent component", foundAsset);
        assertEquals("search found none", 0, foundAsset.getReturnCount());

        paramMap.clear();
        paramMap.put(AssetGroupSearchRequest.SEARCH_KEY_COMPONENT_NAME, new String[] { "overseer" });
        searchRequest = new AssetGroupSearchRequest(paramMap);
        foundAsset = assetGroupService.searchAssetGroups(searchRequest);
        assertNotNull("seach by component", foundAsset);
        assertEquals("search found one", 1, foundAsset.getReturnCount());

        paramMap.clear();
        searchRequest = new AssetGroupSearchRequest(paramMap);
        foundAsset = assetGroupService.searchAssetGroups(searchRequest);
        assertNotNull("seach by component", foundAsset);
        assertEquals("default search found all", 2, foundAsset.getReturnCount());
    }

    private AssetGroup createDummyAssetGroup() {
        AssetGroup assetGroup = new AssetGroup();
        assetGroup.setComponent(buildComponent(DEFAULT_COMPONENT, "overseer"));
        assetGroup.setTenant(tenant);
        return assetGroup;
    }

    private Component buildComponent(final String componentId, final String componentName) {
        final Component component = new Component();
        component.setId(componentId);
        component.setName(componentName);
        return component;
    }

}

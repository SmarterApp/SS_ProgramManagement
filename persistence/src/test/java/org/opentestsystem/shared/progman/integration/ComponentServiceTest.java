/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.integration;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.shared.progman.domain.Component;
import org.opentestsystem.shared.progman.service.ComponentService;
import org.springframework.beans.factory.annotation.Autowired;

public class ComponentServiceTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private ComponentService componentService;
    private Component component;

    @Before
    public void init() {
        component = new Component();
        component.setName("Component Name");
    }

    @Test
    public void testSave() {
        componentService.saveComponent(component);
        String componentId = component.getId();
        assertNotNull("id on saved Item should be not be null", componentId);

    }

    @Test
    public void testFind() {
        componentService.saveComponent(component);
        String componentId = component.getId();
        assertNotNull("id on saved Item should be not be null", componentId);
        Component readObj = componentService.getComponent(componentId);
        assertEquals(readObj.getName(), "Component Name");
    }

    @Test
    public void testRemove() {
        componentService.saveComponent(component);
        String componentId = component.getId();
        assertNotNull("id on saved Item should be not be null", componentId);
        componentService.removeComponent(componentId);
        Component readObj = componentService.getComponent(componentId);
        assertNull("Item must be null", readObj);
    }

    @Test
    public void testFindByName() {
        componentService.saveComponent(component);
        String componentId = component.getId();
        assertNotNull("id on saved Item should be not be null", componentId);
        Component readObj = componentService.getComponentByName("Component Name");
        assertEquals("Id must be the same", readObj.getId(), componentId);

        readObj = componentService.getComponentByName("NOT FOUND");
        assertNull("shouldn't be found", readObj);
    }

    @Test
    public void testGetComponents() {
        Component savedComponent = componentService.saveComponent(component);
        assertNotNull("Saved Item should be not be null", savedComponent);
        Component anotherComponent = new Component();
        anotherComponent.setName("New Component Name");
        Component anotherSavedComponent = componentService.saveComponent(anotherComponent);
        assertNotNull("Saved Item should be not be null", anotherSavedComponent);
        List<Component> components = componentService.getComponents();
        assertNotNull("Component List cannot be null", components);
        assertEquals("There should be 2 items", components.size(), 2);
    }
}

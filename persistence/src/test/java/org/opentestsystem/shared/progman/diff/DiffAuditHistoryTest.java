/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.diff;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;

import java.util.List;

import org.junit.Assert;
import org.junit.Test;
import org.opentestsystem.shared.progman.domain.PropertyConfig;
import org.opentestsystem.shared.progman.domain.PropertyConfigAudit;
import org.opentestsystem.shared.progman.domain.PropertyConfigAudit.AuditType;
import org.opentestsystem.shared.progman.domain.PropertyEntryDiff;
import org.opentestsystem.shared.progman.domain.PropertyEntryDiff.DiffOper;
import org.opentestsystem.shared.progman.encrypt.EncryptionUtil;
import org.opentestsystem.shared.progman.integration.AbstractPersistenceEmbeddedTest;
import org.springframework.beans.factory.annotation.Autowired;

public class DiffAuditHistoryTest extends AbstractPersistenceEmbeddedTest {

    private static final String TEST1 = "test1";
    private static final String TEST2 = "test2";
    private static final String VALUE1 = "value1";
    private static final String VALUE2 = "value2";
    private static final String TEST = "test";
    private static final String ORIG_VAL = "origValue";

    @Autowired
    private DiffAuditHistory diffHistory;

    @Autowired
    private EncryptionUtil encryptUtil;

    @Test
    public void testEquality() {

        PropertyConfig olderConfig = new PropertyConfig();
        PropertyConfig newerConfig = new PropertyConfig();

        olderConfig.addProperty(TEST1, VALUE1, false);
        newerConfig.addProperty(TEST1, VALUE1, false);

        PropertyConfigAudit olderHistory = new PropertyConfigAudit(olderConfig, AuditType.ADD, TEST);
        PropertyConfigAudit newerHistory = new PropertyConfigAudit(newerConfig, AuditType.UPDATE, TEST);

        List<PropertyEntryDiff> diffs = diffHistory.diffHistory(olderHistory, newerHistory);

        Assert.assertThat(diffs, notNullValue());
        Assert.assertThat(diffs.size(), is(1));
        Assert.assertThat(diffs.get(0).getEntryDiffOper(), is(DiffOper.EQ));

    }

    @Test
    public void testBothConfigAuditNull() {

        PropertyConfigAudit olderHistory = null;
        PropertyConfigAudit newerHistory = null;

        List<PropertyEntryDiff> diffs = diffHistory.diffHistory(olderHistory, newerHistory);

        Assert.assertThat(diffs, notNullValue());
        Assert.assertThat(diffs.size(), is(0));

    }

    @Test
    public void testBothPropConfigsNull() {
        PropertyConfigAudit olderHistory = new PropertyConfigAudit(null, AuditType.ADD, null);
        PropertyConfigAudit newerHistory = new PropertyConfigAudit(null, AuditType.ADD, null);

        List<PropertyEntryDiff> diffs = diffHistory.diffHistory(olderHistory, newerHistory);
        Assert.assertThat(diffs, notNullValue());
        Assert.assertThat(diffs.size(), is(0));
    }

    @Test
    public void testAllAdd() {
        PropertyConfig olderConfig = new PropertyConfig();
        PropertyConfig newerConfig = new PropertyConfig();

        newerConfig.addProperty(TEST1, VALUE1, false);
        newerConfig.addProperty(TEST2, VALUE2, false);

        PropertyConfigAudit olderHistory = new PropertyConfigAudit(olderConfig, AuditType.ADD, TEST);
        PropertyConfigAudit newerHistory = new PropertyConfigAudit(newerConfig, AuditType.UPDATE, TEST);

        List<PropertyEntryDiff> diffs = diffHistory.diffHistory(olderHistory, newerHistory);

        Assert.assertThat(diffs, notNullValue());
        Assert.assertThat(diffs.size(), is(2));
        Assert.assertThat(diffs.get(0).getEntryDiffOper(), is(DiffOper.ADD));
        Assert.assertThat(diffs.get(1).getEntryDiffOper(), is(DiffOper.ADD));

    }

    @Test
    public void testAllRemove() {
        PropertyConfig olderConfig = new PropertyConfig();
        PropertyConfig newerConfig = new PropertyConfig();
        //a property config no properties is invalid adding one to make a valid test case
        newerConfig.addProperty("newKey", "newValue", false);

        olderConfig.addProperty(TEST1, VALUE1, false);
        olderConfig.addProperty(TEST2, VALUE2, false);

        PropertyConfigAudit olderHistory = new PropertyConfigAudit(olderConfig, AuditType.ADD, TEST);
        PropertyConfigAudit newerHistory = new PropertyConfigAudit(newerConfig, AuditType.UPDATE, TEST);

        List<PropertyEntryDiff> diffs = diffHistory.diffHistory(olderHistory, newerHistory);

        Assert.assertThat(diffs, notNullValue());
        Assert.assertThat(diffs.size(), is(3));
        Assert.assertThat(diffs.get(0).getEntryDiffOper(), is(DiffOper.DEL));
        Assert.assertThat(diffs.get(1).getEntryDiffOper(), is(DiffOper.DEL));
        Assert.assertThat(diffs.get(2).getEntryDiffOper(), is(DiffOper.ADD));
    }

    @Test
    public void testChange() {
        PropertyConfig olderConfig = new PropertyConfig();
        PropertyConfig newerConfig = new PropertyConfig();

        olderConfig.addProperty(TEST1, VALUE1, false);
        olderConfig.addProperty(TEST2, ORIG_VAL, false);

        newerConfig.addProperty(TEST1, VALUE1, false);
        newerConfig.addProperty(TEST2, VALUE2, false);

        PropertyConfigAudit olderHistory = new PropertyConfigAudit(olderConfig, AuditType.ADD, TEST);
        PropertyConfigAudit newerHistory = new PropertyConfigAudit(newerConfig, AuditType.UPDATE, TEST);

        List<PropertyEntryDiff> diffs = diffHistory.diffHistory(olderHistory, newerHistory);

        Assert.assertThat(diffs, notNullValue());
        Assert.assertThat(diffs.size(), is(2));
        Assert.assertThat(diffs.get(0).getEntryDiffOper(), is(DiffOper.EQ));
        Assert.assertThat(diffs.get(1).getEntryDiffOper(), is(DiffOper.CHG));

    }

    @Test
    public void testChangeEncrypt() {
        PropertyConfig olderConfig = new PropertyConfig();
        PropertyConfig newerConfig = new PropertyConfig();

        olderConfig.addProperty(TEST1, VALUE1, false);
        olderConfig.addProperty(TEST2, ORIG_VAL, false);

        newerConfig.addProperty(TEST1, VALUE1, false);
        newerConfig.addProperty(TEST2, encryptUtil.encrypt(ORIG_VAL), true);

        PropertyConfigAudit olderHistory = new PropertyConfigAudit(olderConfig, AuditType.ADD, TEST);
        PropertyConfigAudit newerHistory = new PropertyConfigAudit(newerConfig, AuditType.UPDATE, TEST);

        List<PropertyEntryDiff> diffs = diffHistory.diffHistory(olderHistory, newerHistory);

        Assert.assertThat(diffs, notNullValue());
        Assert.assertThat(diffs.size(), is(2));
        Assert.assertThat(diffs.get(0).getEntryDiffOper(), is(DiffOper.EQ));
        Assert.assertThat(diffs.get(1).getEntryDiffOper(), is(DiffOper.CHG));
        Assert.assertThat(diffs.get(1).isEncryptChanged(), is(true));

    }

    @Test
    public void testChangeEncryptedValues() {
        PropertyConfig olderConfig = new PropertyConfig();
        PropertyConfig newerConfig = new PropertyConfig();

        olderConfig.addProperty(TEST1, VALUE1, false);
        olderConfig.addProperty(TEST2, encryptUtil.encrypt(ORIG_VAL), true);

        newerConfig.addProperty(TEST1, VALUE1, false);
        newerConfig.addProperty(TEST2, encryptUtil.encrypt(TEST), true);

        PropertyConfigAudit olderHistory = new PropertyConfigAudit(olderConfig, AuditType.ADD, TEST);
        PropertyConfigAudit newerHistory = new PropertyConfigAudit(newerConfig, AuditType.UPDATE, TEST);

        List<PropertyEntryDiff> diffs = diffHistory.diffHistory(olderHistory, newerHistory);

        Assert.assertThat(diffs, notNullValue());
        Assert.assertThat(diffs.size(), is(2));
        Assert.assertThat(diffs.get(0).getEntryDiffOper(), is(DiffOper.EQ));
        Assert.assertThat(diffs.get(1).getEntryDiffOper(), is(DiffOper.CHG));
        Assert.assertThat(diffs.get(1).isValueChanged(), is(true));

        Assert.assertThat(diffs.get(1).getOldPropertyValue(), is(ORIG_VAL));
        Assert.assertThat(diffs.get(1).getPropertyValue(), is(TEST));

    }

    @Test
    public void testChangePropKey() {
        PropertyConfig olderConfig = new PropertyConfig();
        PropertyConfig newerConfig = new PropertyConfig();

        olderConfig.addProperty(TEST1, VALUE1, false);
        olderConfig.addProperty(TEST2, ORIG_VAL, false);

        newerConfig.addProperty(TEST1, VALUE1, false);
        newerConfig.addProperty("test3", encryptUtil.encrypt(ORIG_VAL), true);

        PropertyConfigAudit olderHistory = new PropertyConfigAudit(olderConfig, AuditType.ADD, TEST);
        PropertyConfigAudit newerHistory = new PropertyConfigAudit(newerConfig, AuditType.UPDATE, TEST);

        List<PropertyEntryDiff> diffs = diffHistory.diffHistory(olderHistory, newerHistory);

        Assert.assertThat(diffs, notNullValue());
        Assert.assertThat(diffs.size(), is(3));
        Assert.assertThat(diffs.get(0).getEntryDiffOper(), is(DiffOper.EQ));
        Assert.assertThat(diffs.get(1).getEntryDiffOper(), is(DiffOper.DEL));
        Assert.assertThat(diffs.get(2).getEntryDiffOper(), is(DiffOper.ADD));
    }

    @Test
    public void testChangePropValue() {
        PropertyConfig olderConfig = new PropertyConfig();
        PropertyConfig newerConfig = new PropertyConfig();

        olderConfig.addProperty(TEST1, encryptUtil.encrypt(VALUE1), true);
        olderConfig.addProperty(TEST2, ORIG_VAL, false);

        newerConfig.addProperty(TEST1, encryptUtil.encrypt(VALUE1), true);
        newerConfig.addProperty(TEST2, encryptUtil.encrypt("newValue"), true);

        PropertyConfigAudit olderHistory = new PropertyConfigAudit(olderConfig, AuditType.ADD, TEST);
        PropertyConfigAudit newerHistory = new PropertyConfigAudit(newerConfig, AuditType.UPDATE, TEST);

        List<PropertyEntryDiff> diffs = diffHistory.diffHistory(olderHistory, newerHistory);

        Assert.assertThat(diffs, notNullValue());
        Assert.assertThat(diffs.size(), is(2));
        Assert.assertThat(diffs.get(0).getEntryDiffOper(), is(DiffOper.EQ));
        Assert.assertThat(diffs.get(1).getEntryDiffOper(), is(DiffOper.CHG));
        Assert.assertThat(diffs.get(1).isValueChanged(), is(true));

    }

}

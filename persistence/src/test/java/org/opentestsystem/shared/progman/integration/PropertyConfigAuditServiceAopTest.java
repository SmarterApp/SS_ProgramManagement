/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.shared.progman.domain.PropertyConfig;
import org.opentestsystem.shared.progman.domain.PropertyConfigAudit;
import org.opentestsystem.shared.progman.domain.search.PropertyConfigAuditSearchRequest;
import org.opentestsystem.shared.progman.service.PropertyConfigAuditService;
import org.opentestsystem.shared.progman.service.PropertyConfigService;
import org.opentestsystem.shared.progman.testaop.TestAopEncryptDecryptAspect;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Maps;

/**
 * Verifications that the AOP pointcuts are valid
 */
public class PropertyConfigAuditServiceAopTest extends AbstractPersistenceEmbeddedTest {

    private static final String DEV = "DEV";

    @Autowired
    private PropertyConfigAuditService propertyConfigAuditService;

    @Autowired
    private PropertyConfigService propertyConfigService;

    @Autowired
    private TestAopEncryptDecryptAspect aspect;

    @Before
    public void resetAspect() {
        this.aspect.resetConfigArg();
        this.aspect.resetSearchRespArg();
        this.aspect.resetEncryptInvocations();
        this.aspect.resetDecryptInvocations();
    }

    private SearchResponse<PropertyConfigAudit> searchForAudits(final String configId) {
        final Map<String, String[]> params = Maps.newHashMap();
        params.put(PropertyConfigAuditSearchRequest.SEARCH_FILTER_AUDITED_ID, new String[] { configId });
        final PropertyConfigAuditSearchRequest search = new PropertyConfigAuditSearchRequest(params);

        return this.propertyConfigAuditService.getPropertyConfigAudits(search);
    }

    @SuppressWarnings("unchecked")
    @Test
    public void testAuditOnCreateAndUpdate() {
        final PropertyConfig propertyConfig = new PropertyConfig();

        propertyConfig.setName("Test Sftp Configuration");
        propertyConfig.setEnvName(DEV);
        propertyConfig.addProperty("testkey1", "testvalue1");
        this.propertyConfigService.savePropertyConfig(propertyConfig);

        final String configId = propertyConfig.getId();

        final SearchResponse<PropertyConfigAudit> audits = searchForAudits(configId);

        assertThat((SearchResponse<PropertyConfigAudit>) this.aspect.getSearchRespArg(), is(audits));

        propertyConfig.addProperty("key", "value");
        this.propertyConfigService.savePropertyConfig(propertyConfig);

        final SearchResponse<PropertyConfigAudit> auditsUpdate = searchForAudits(configId);

        assertThat(this.aspect.getEncryptInvocations(), is(2));
        assertThat(this.aspect.getDecryptInvocations(), is(2));

        assertThat((SearchResponse<PropertyConfigAudit>) this.aspect.getSearchRespArg(), is(auditsUpdate));
    }

}

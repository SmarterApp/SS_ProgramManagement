/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.integration;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import java.util.Arrays;
import java.util.List;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.opentestsystem.shared.progman.domain.PropertyConfig;
import org.opentestsystem.shared.progman.domain.PropertyEntry;
import org.opentestsystem.shared.progman.service.PropertyConfigService;
import org.springframework.beans.factory.annotation.Autowired;

/**
 * Test for PropertyConfig Service.
 */
public class PropertyConfigServiceTest extends AbstractPersistenceEmbeddedTest {
    
    @Rule
    public ExpectedException exception = ExpectedException.none();

    private static final String DEV = "DEV";

    @Autowired
    private PropertyConfigService propertyConfigService;

    @Test
    public void testSave() {
        PropertyConfig propertyConfig = new PropertyConfig();

        propertyConfig.setName("Test Sftp Configuration");
        propertyConfig.setEnvName(DEV);
        propertyConfig.setProperties(Arrays.asList(new PropertyEntry[] {new PropertyEntry("a", "b") }));
        propertyConfigService.savePropertyConfig(propertyConfig);

        String configId = propertyConfig.getId();
        assertNotNull("id on saved Item should be not be null", configId);
    }

    @Test
    public void testGetById() {
        PropertyConfig propertyConfig = new PropertyConfig();

        propertyConfig.setName("Test Sftp Configuration");
        propertyConfig.setEnvName(DEV);
        propertyConfig.setProperties(Arrays.asList(new PropertyEntry[] {new PropertyEntry("a", "b") }));

        propertyConfigService.savePropertyConfig(propertyConfig);

        String configId = propertyConfig.getId();
        assertNotNull("id on saved Item should be not be null", configId);

        PropertyConfig readObj = propertyConfigService.getPropertyConfig(configId);
        assertEquals("Environment Name must be the same", readObj.getEnvName(), DEV);
    }

    @Test
    public void testRemove() {
        PropertyConfig propertyConfig = new PropertyConfig();
        propertyConfig.setName("Test Sftp Configuration");
        propertyConfig.setEnvName(DEV);
        propertyConfig.setProperties(Arrays.asList(new PropertyEntry[] {new PropertyEntry("a", "b") }));
        propertyConfigService.savePropertyConfig(propertyConfig);

        String configId = propertyConfig.getId();
        assertNotNull("id on saved Item should be not be null", configId);

        propertyConfigService.removePropertyConfig(configId);

        PropertyConfig readObj = propertyConfigService.getPropertyConfig(configId);
        assertNull("Item must be null", readObj);
    }

    @Test
    public void testFindByNameAndEnvName() {
        PropertyConfig propertyConfig = new PropertyConfig();

        propertyConfig.setName("test-config");
        propertyConfig.setEnvName(DEV);
        propertyConfig.setProperties(Arrays.asList(new PropertyEntry[] {new PropertyEntry("a", "b") }));
        propertyConfigService.savePropertyConfig(propertyConfig);

        String id = propertyConfig.getId();
        assertNotNull("id on saved Item should be not be null", id);

        PropertyConfig readObj = propertyConfigService.getPropertyConfig("test-config", DEV);
        assertEquals("Id must be the same", readObj.getId(), id);
    }

    @Test
    public void testFindEffectivePropertiesWithNoParent() {
        PropertyConfig batman = new PropertyConfig();
        batman.setName("batman");
        batman.setEnvName(DEV);

        PropertyEntry e1 = new PropertyEntry("movie.hero", "batman");
        PropertyEntry e2 = new PropertyEntry("movie.villain", "joker");
        PropertyEntry e3 = new PropertyEntry("movie.vehicle", "batmobile");

        List<PropertyEntry> myProps = Arrays.asList(new PropertyEntry[] {e1, e2, e3 });
        batman.setProperties(myProps);
        propertyConfigService.savePropertyConfig(batman);

        String id = batman.getId();
        assertNotNull("id on saved Item should be not be null", id);

        PropertyConfig effectiveProps = propertyConfigService.getEffectiveProperties("batman", DEV, null);
        assertEquals("Id must be the same", effectiveProps.getId(), id);
        assertEquals("property name wrong", "batman", effectiveProps.getName());
        assertEquals("property env wrong", "DEV", effectiveProps.getEnvName());

        assertEquals("wront number of properties", 3, effectiveProps.getProperties().size());
        assertEquals("wrong propery value", "batman", findProperty(effectiveProps, "movie.hero"));
        assertEquals("wrong propery value", "joker", findProperty(effectiveProps, "movie.villain"));
        assertEquals("wrong propery value", "batmobile", findProperty(effectiveProps, "movie.vehicle"));
    }

    @Test
    public void testFindEffectivePropertiesWithParent() {
        PropertyConfig batman = new PropertyConfig();
        batman.setName("batman");
        batman.setEnvName(DEV);

        PropertyEntry e1 = new PropertyEntry("movie.hero", "batman");
        PropertyEntry e2 = new PropertyEntry("movie.villain", "joker");
        PropertyEntry e3 = new PropertyEntry("movie.vehicle", "batmobile");

        List<PropertyEntry> myProps = Arrays.asList(new PropertyEntry[] {e1, e2, e3 });
        batman.setProperties(myProps);
        propertyConfigService.savePropertyConfig(batman);
        String id = batman.getId();
        assertNotNull("id on saved Item should be not be null", id);

        PropertyConfig batmanNew = new PropertyConfig();
        batmanNew.setName("batmanNew");
        batmanNew.setEnvName(DEV);

        PropertyEntry new1 = new PropertyEntry("movie.vehicle", "batboat");
        PropertyEntry new2 = new PropertyEntry("movie.sidekick", "robin");

        List<PropertyEntry> newProps = Arrays.asList(new PropertyEntry[] {new1, new2 });
        batmanNew.setProperties(newProps);
        propertyConfigService.savePropertyConfig(batmanNew);

        PropertyConfig effectiveProps = propertyConfigService.getEffectiveProperties("batman", DEV, "batmanNew");
        assertNull("Id must be the same", effectiveProps.getId());
        assertEquals("property name wrong", "batmanNew extends batman", effectiveProps.getName());
        assertEquals("property env wrong", "DEV", effectiveProps.getEnvName());

        assertEquals("Id must be the same", 4, effectiveProps.getProperties().size());
        assertEquals("wrong propery value", "batman", findProperty(effectiveProps, "movie.hero"));
        assertEquals("wrong propery value", "joker", findProperty(effectiveProps, "movie.villain"));
        assertEquals("wrong propery value", "batboat", findProperty(effectiveProps, "movie.vehicle"));
        assertEquals("wrong propery value", "robin", findProperty(effectiveProps, "movie.sidekick"));
    }

    @Test
    public void testFindEffectivePropertiesNoValues() {

        PropertyConfig effectiveProps = propertyConfigService.getEffectiveProperties("batmanNew", DEV, "batman");
        assertNotNull("empty property config exptend", effectiveProps);
        assertNull("id should be null", effectiveProps.getId());

        assertEquals("no props to find", 0, effectiveProps.getProperties().size());
    }

    @Test
    public void testFindEffectivePropertiesWrongEnv() {
        PropertyConfig batman = new PropertyConfig();
        batman.setName("batman");
        batman.setEnvName(DEV);

        PropertyEntry e1 = new PropertyEntry("movie.hero", "batman");
        PropertyEntry e2 = new PropertyEntry("movie.villain", "joker");
        PropertyEntry e3 = new PropertyEntry("movie.vehicle", "batmobile");

        List<PropertyEntry> myProps = Arrays.asList(new PropertyEntry[] {e1, e2, e3 });
        batman.setProperties(myProps);
        propertyConfigService.savePropertyConfig(batman);
        String id = batman.getId();
        assertNotNull("id on saved Item should be not be null", id);

        PropertyConfig batmanNew = new PropertyConfig();
        batmanNew.setName("batmanNew");
        batmanNew.setEnvName("QA");

        PropertyEntry new1 = new PropertyEntry("movie.vehicle", "batboat");
        PropertyEntry new2 = new PropertyEntry("movie.sidekick", "robin");

        List<PropertyEntry> newProps = Arrays.asList(new PropertyEntry[] {new1, new2 });
        batmanNew.setProperties(newProps);
        propertyConfigService.savePropertyConfig(batmanNew);

        PropertyConfig effectiveProps = propertyConfigService.getEffectiveProperties("batman", DEV, "batmanNew");
        assertNull("Id must be the same", effectiveProps.getId());
        assertEquals("property name wrong", "batmanNew extends batman", effectiveProps.getName());
        assertEquals("property env wrong", "DEV", effectiveProps.getEnvName());

        assertEquals("Id must be the same", 3, effectiveProps.getProperties().size());
        assertEquals("wrong propery value", "batman", findProperty(effectiveProps, "movie.hero"));
        assertEquals("wrong propery value", "joker", findProperty(effectiveProps, "movie.villain"));
        assertEquals("wrong propery value", "batmobile", findProperty(effectiveProps, "movie.vehicle"));
        assertNull("wrong propery value", findProperty(effectiveProps, "movie.sidekick"));
    }

    private String findProperty(final PropertyConfig config, final String key) {
        String val = null;
        for (PropertyEntry entry : config.getProperties()) {
            if (key.equals(entry.getPropertyKey())) {
                val = entry.getPropertyValue();
                break;
            }
        }
        return val;
    }
}

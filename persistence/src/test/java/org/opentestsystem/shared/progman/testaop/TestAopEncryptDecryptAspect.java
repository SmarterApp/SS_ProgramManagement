/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.testaop;

import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.opentestsystem.shared.progman.domain.PropertyConfig;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class TestAopEncryptDecryptAspect {

    private int encryptInvocations;
    private int decryptInvocations;

    private PropertyConfig configArg;

    private SearchResponse<?> searchRespArg;

    /**
     * Encrypt any property values in the PropertyConfig object that need to be encrypted
     * @param propertyConfig
     */
    @Before("org.opentestsystem.shared.progman.encrypt.EncryptDecryptAspect.saveMethod() && org.opentestsystem.shared.progman.encrypt.EncryptDecryptAspect.propertyConfigArg(propertyConfig)")
    public void encrypt(final PropertyConfig propertyConfig) {
        encryptInvocations++;
        configArg = propertyConfig;
    }

    /**
     * Decrypt any property values in the PropertyConfig object that need to be decrypted
     * @param propertyConfig
     */
    @AfterReturning(pointcut = "org.opentestsystem.shared.progman.encrypt.EncryptDecryptAspect.getMethod() "
            + " || org.opentestsystem.shared.progman.encrypt.EncryptDecryptAspect.searchMethod()", returning = "propertyConfig")
    public void decrypt(final PropertyConfig propertyConfig) {
        decryptInvocations++;
        configArg = propertyConfig;
    }

    /**
     * Decrypt any property values in the SearchResponse that need to be decrypted. This function
     * is used for SearchResponse<PropertyConfig> and SearchResponse<PropertyConfigAudit>.
     * Due to type erasure with generic collections, the advice cannot be made more specific
     * than for a return type of SearchResponse<?>
     * @param searchResponse
     */
    @AfterReturning(pointcut = "org.opentestsystem.shared.progman.encrypt.EncryptDecryptAspect.getMethod() "
            + "|| org.opentestsystem.shared.progman.encrypt.EncryptDecryptAspect.searchMethod()", returning = "searchResponse")
    public void decrypt(final SearchResponse<?> searchResponse) {
        decryptInvocations++;
        searchRespArg = searchResponse;
    }

    public int getEncryptInvocations() {
        return encryptInvocations;
    }

    public void resetEncryptInvocations() {
        encryptInvocations = 0;
    }

    public int getDecryptInvocations() {
        return decryptInvocations;
    }

    public void resetDecryptInvocations() {
        decryptInvocations = 0;
    }

    public PropertyConfig getConfigArg() {
        return configArg;
    }

    public void resetConfigArg() {
        configArg = null;
    }

    public SearchResponse<?> getSearchRespArg() {
        return searchRespArg;
    }

    public void resetSearchRespArg() {
        searchRespArg = null;
    }

}

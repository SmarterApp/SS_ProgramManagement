/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.integration;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.opentestsystem.shared.progman.domain.PropertyConfig;
import org.opentestsystem.shared.progman.domain.PropertyConfigAudit;
import org.opentestsystem.shared.progman.domain.PropertyConfigAudit.AuditType;
import org.opentestsystem.shared.progman.domain.PropertyEntry;
import org.opentestsystem.shared.progman.domain.search.PropertyConfigAuditSearchRequest;
import org.opentestsystem.shared.progman.service.PropertyConfigAuditService;
import org.opentestsystem.shared.progman.service.PropertyConfigService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

/**
 * Test for PropertyConfig Service.
 */
public class PropertyConfigAuditServiceTest extends AbstractPersistenceEmbeddedTest {

    private static final String DEV = "DEV";

    @Autowired
    private PropertyConfigService propertyConfigService;

    @Autowired
    private PropertyConfigAuditService propertyConfigAuditService;

    private SearchResponse<PropertyConfigAudit> searchForAudits(final String configId) {
        Map<String, String[]> params = Maps.newHashMap();
        params.put(PropertyConfigAuditSearchRequest.SEARCH_FILTER_AUDITED_ID, new String[] {configId });
        PropertyConfigAuditSearchRequest search = new PropertyConfigAuditSearchRequest(params);

        return propertyConfigAuditService.getPropertyConfigAudits(search);
    }

    @Test
    public void testAuditOnCreateAndUpdate() {
        PropertyConfig propertyConfig = new PropertyConfig();

        propertyConfig.setName("Test Sftp Configuration");
        propertyConfig.setEnvName(DEV);
        List<PropertyEntry> props = Lists.newArrayList();
        props.add(new PropertyEntry("a", "b"));
        propertyConfig.setProperties(props);
        propertyConfigService.savePropertyConfig(propertyConfig);

        String configId = propertyConfig.getId();
        assertNotNull("id on saved Item should be not be null", configId);

        SearchResponse<PropertyConfigAudit> audits = searchForAudits(configId);
        assertNotNull("audit should have been written on insert", audits);
        assertEquals("audit should have been written on insert", 1, audits.getSearchResults().size());

        propertyConfig.addProperty("key", "value");
        propertyConfigService.savePropertyConfig(propertyConfig);

        SearchResponse<PropertyConfigAudit> auditsUpdate = searchForAudits(configId);
        assertEquals("audit should have been written on insert and update", 2, auditsUpdate.getSearchResults().size());
        assertEquals("second audit should be an update", AuditType.UPDATE, auditsUpdate.getSearchResults().get(1).getAuditType());
    }

    @Test
    public void testRemoveCreatesDeleteAudit() {
        PropertyConfig propertyConfig = new PropertyConfig();
        propertyConfig.setName("Test Sftp Configuration");
        propertyConfig.setEnvName(DEV);
        propertyConfig.setProperties(Arrays.asList(new PropertyEntry[] {new PropertyEntry("a", "b") }));
        propertyConfigService.savePropertyConfig(propertyConfig);

        String configId = propertyConfig.getId();
        assertNotNull("id on saved Item should be not be null", configId);

        propertyConfigService.removePropertyConfig(configId);

        PropertyConfig readObj = propertyConfigService.getPropertyConfig(configId);
        assertNull("Item must be null", readObj);

        SearchResponse<PropertyConfigAudit> auditsDelete = searchForAudits(configId);
        assertNotNull("audit should have been written on insert", auditsDelete);
        assertEquals("audit should have been written on insert and delete", 2, auditsDelete.getSearchResults().size());
        assertEquals("second audit should be an update", AuditType.DELETE, auditsDelete.getSearchResults().get(1).getAuditType());
    }
}

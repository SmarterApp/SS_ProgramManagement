/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.integration;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;
import java.util.List;

import javax.validation.ConstraintViolationException;

import org.bson.types.ObjectId;
import org.junit.Test;
import org.opentestsystem.shared.progman.domain.Asset;
import org.opentestsystem.shared.progman.domain.Asset.AssetType;
import org.opentestsystem.shared.progman.domain.AssetGroup;
import org.opentestsystem.shared.progman.domain.Component;
import org.opentestsystem.shared.progman.domain.Tenant;
import org.opentestsystem.shared.progman.persistence.AssetGroupRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.DuplicateKeyException;

public class AssetGroupRepositoryTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private AssetGroupRepository assetGroupRepository;

    @Value("classpath:assetTestFile.txt")
    private byte[] testFile;

    @Test
    public void saveAssetGroupTest() {

        AssetGroup assetGroup = createDummyAssetGroup();

        AssetGroup savedAssetGroup = assetGroupRepository.save(assetGroup);
        assertNotNull("saved asset is null", savedAssetGroup);
        assertNotNull("asset id is null, did it save?", savedAssetGroup.getId());

        // since the repository, hands back a reference to the object passed in (albeit updated with the id)
        // the reference to the file is still set
        Asset savedAsset = savedAssetGroup.getAssets().get(0);
        assertNotNull("asset List is null", savedAsset);

        // retrieve the object from the store, to see if the file actually got persisted (it shouldn't)
        assetGroupRepository.findOne(savedAssetGroup.getId());

    }

    // cannot save two groups with same component and tenant
    @Test(expected = DuplicateKeyException.class)
    public void saveDupAssetGroupTest() {

        AssetGroup assetGroup = createDummyAssetGroup();

        AssetGroup savedAssetGroup = assetGroupRepository.save(assetGroup);
        assertNotNull("saved asset is null", savedAssetGroup);
        assertNotNull("asset id is null, did it save?", savedAssetGroup.getId());
        assetGroupRepository.save(createDummyAssetGroup());
    }

    @Test(expected = ConstraintViolationException.class)
    public void saveMissingIndexAssetGroupTest() {
        AssetGroup assetGroup = new AssetGroup();
        assetGroupRepository.save(assetGroup);
    }

    @Test
    public void findByTenantIdTest() {
        ObjectId tenantId = new ObjectId();
        AssetGroup dummyAssetGroup = createDummyAssetGroup();
        dummyAssetGroup.getTenant().setId(tenantId.toString());
        assetGroupRepository.save(dummyAssetGroup);

        List<AssetGroup> searchResults = assetGroupRepository.findByTenantId(tenantId);
        assertEquals("1 group should be found", searchResults.size(), 1);
        assertEquals("dummyAssetGroup should be found", searchResults.get(0).getId(), dummyAssetGroup.getId());
        assertTrue("no group should be found", assetGroupRepository.findByTenantId(new ObjectId()).isEmpty());
    }

    @Test
    public void findByComponentIdTest() {
        ObjectId componentId = new ObjectId();
        AssetGroup dummyAssetGroup = createDummyAssetGroup();
        dummyAssetGroup.getComponent().setId(componentId.toString());
        assetGroupRepository.save(dummyAssetGroup);

        List<AssetGroup> searchResults = assetGroupRepository.findByComponentId(componentId);
        assertEquals("1 group should be found", searchResults.size(), 1);
        assertEquals("dummyAssetGroup should be found", searchResults.get(0).getId(), dummyAssetGroup.getId());
        assertTrue("no group should be found", assetGroupRepository.findByTenantId(new ObjectId()).isEmpty());
    }

    private AssetGroup createDummyAssetGroup() {
        AssetGroup assetGroup = new AssetGroup();
        final Component component = new Component();
        component.setId("2222");
        component.setName("overseer");
        assetGroup.setComponent(component);

        final Tenant tenant = new Tenant();
        tenant.setId("aaa");
        tenant.setName("overseer");
        assetGroup.setTenant(tenant);

        Asset asset = new Asset();
        asset.setType(AssetType.FILE);
        asset.setName("borderColor");
        asset.setAssetFileName("test.txt");
        assetGroup.setAssets(Arrays.asList(new Asset[] { asset }));
        return assetGroup;
    }
}

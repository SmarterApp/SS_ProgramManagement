/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.transformer;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import org.junit.Test;
import org.opentestsystem.shared.progman.domain.AssetGroup;
import org.opentestsystem.shared.progman.domain.Tenant;

public class AssetGroupTenantTransformerTest {

    private AssetGroupTenantTransformer transformer = new AssetGroupTenantTransformer(buildTenant("test-id", "test-tenant"));

    @Test
    public void applyTest() {
        Tenant tenant = buildTenant("test-id", "original-tenant");
        AssetGroup assetGroup = buildAssetGroup("1", tenant);
        AssetGroup transformedAssetGroup = transformer.apply(assetGroup);

        assertThat(transformedAssetGroup.getId(), is("1"));
        assertThat(transformedAssetGroup.getTenant().getId(), is("test-id"));
        assertThat(transformedAssetGroup.getTenant().getName(), is("test-tenant"));
    }

    @Test
    public void applyFailureTest() {
        // null asset group
        AssetGroup transformedAssetGroup = transformer.apply(null);
        assertThat(transformedAssetGroup, is(nullValue()));

        // null tenant
        Tenant tenant = null;
        AssetGroup assetGroup = buildAssetGroup("1", tenant);
        transformedAssetGroup = transformer.apply(assetGroup);
        assertThat(transformedAssetGroup.getId(), is("1"));
        assertThat(transformedAssetGroup.getTenant(), is(nullValue()));

        // null tenant id
        tenant = buildTenant(null, "tenantWithoutId");
        assetGroup = buildAssetGroup("1", tenant);
        transformedAssetGroup = transformer.apply(assetGroup);
        assertThat(transformedAssetGroup.getId(), is("1"));
        assertThat(transformedAssetGroup.getTenant(), is(not(nullValue())));
        assertThat(transformedAssetGroup.getTenant().getId(), is(nullValue()));

        // not matching tenant id
        tenant = buildTenant("abc", "normalTenant");
        assetGroup = buildAssetGroup("1", tenant);
        transformedAssetGroup = transformer.apply(assetGroup);
        assertThat(transformedAssetGroup.getId(), is("1"));
        assertThat(transformedAssetGroup.getTenant().getId(), is("abc"));
        assertThat(transformedAssetGroup.getTenant().getName(), is("normalTenant"));
    }

    private static Tenant buildTenant(String id, String name) {
        Tenant tenant = new Tenant();
        tenant.setId(id);
        tenant.setName(name);

        return tenant;
    }

    private static AssetGroup buildAssetGroup(String id, Tenant tenant) {
        AssetGroup assetGroup = new AssetGroup();
        assetGroup.setId(id);
        assetGroup.setTenant(tenant);

        return assetGroup;
    }
}

/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.integration;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.opentestsystem.shared.progman.domain.PropertyConfig;
import org.opentestsystem.shared.progman.domain.PropertyConfigAudit;
import org.opentestsystem.shared.progman.domain.PropertyConfigAudit.AuditType;
import org.opentestsystem.shared.progman.domain.PropertyEntry;
import org.opentestsystem.shared.progman.domain.search.PropertyConfigAuditSearchRequest;
import org.opentestsystem.shared.progman.persistence.PropertyConfigAuditRepository;
import org.opentestsystem.shared.progman.persistence.PropertyConfigRepository;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

/**
 * Testing CRUD operations for PropertyConfig domain object.
 */
public class PropertyConfigAuditRepositoryTest extends AbstractPersistenceEmbeddedTest {

    private static final String DEV = "DEV";

    @Autowired
    private PropertyConfigRepository propertyConfigRepository;

    @Autowired
    private PropertyConfigAuditRepository propertyConfigAuditRepository;

    @Test
    public void testPropertyConfigAuditRepositoryAdd() {
        PropertyConfig propertyConfig = new PropertyConfig();

        propertyConfig.setName("Test Sftp Configuration");
        propertyConfig.setEnvName(DEV);
        propertyConfig.setProperties(Arrays.asList(new PropertyEntry[] {new PropertyEntry("a", "b") }));
        propertyConfig = propertyConfigRepository.save(propertyConfig);

        PropertyConfigAudit audit1 = new PropertyConfigAudit(propertyConfig, AuditType.ADD, null);
        propertyConfigAuditRepository.save(audit1);

        String configId = propertyConfig.getId();
        assertNotNull("id on saved Item should be not be null", configId);

        List<PropertyConfigAudit> audits = propertyConfigAuditRepository.findAll();
        assertEquals("size is 1", 1, audits.size());
        PropertyConfigAudit audit = audits.get(0);
        assertEquals("id should match", configId, audit.getPropertyConfig().getId());
        assertNotNull("timestamp should be present", audit.getAuditTimestamp());
        assertEquals("audit type is ADD", PropertyConfigAudit.AuditType.ADD, audit.getAuditType());
        assertEquals("Environment Name must be the same", DEV, audit.getPropertyConfig().getEnvName());
    }

    @Test
    public void testPropertyConfigAuditRepositoryUpdate() {
        PropertyConfig propertyConfig = new PropertyConfig();

        propertyConfig.setName("Test Sftp Configuration");
        propertyConfig.setEnvName(DEV);
        List<PropertyEntry> props = Lists.newArrayList();
        props.add(new PropertyEntry("a", "b"));
        propertyConfig.setProperties(props);

        propertyConfig = propertyConfigRepository.save(propertyConfig);

        PropertyConfigAudit audit1 = new PropertyConfigAudit(propertyConfig, AuditType.ADD, null);
        propertyConfigAuditRepository.save(audit1);

        String configId = propertyConfig.getId();
        assertNotNull("id on saved Item should be not be null", configId);
        propertyConfig.addProperty("update", "value2");
        propertyConfigRepository.save(propertyConfig);

        audit1.setAuditType(AuditType.UPDATE);
        audit1.setId(null);
        propertyConfigAuditRepository.save(audit1);

        List<PropertyConfigAudit> audits = propertyConfigAuditRepository.findAll();
        assertEquals("size should be 2", 2, audits.size());
        PropertyConfigAudit audit = audits.get(0);
        assertEquals("id s should match", configId, audit.getPropertyConfig().getId());
        assertNotNull("non null timestamp", audit.getAuditTimestamp());
        assertEquals("audit type should be ADD", PropertyConfigAudit.AuditType.ADD, audit.getAuditType());

        PropertyConfigAudit audit2 = audits.get(1);
        assertEquals("ids should match", configId, audit2.getPropertyConfig().getId());
        assertNotNull("non null timestamp", audit2.getAuditTimestamp());
        assertEquals("audit type should be UPDATE", PropertyConfigAudit.AuditType.UPDATE, audit2.getAuditType());
        ensureMatchingKey(audit2, "update");
        ensureMatchingValue(audit2, "value2");

    }

    @Test
    public void testPropertyConfigAuditRepositoryDelete() {
        PropertyConfig propertyConfig = new PropertyConfig();

        propertyConfig.setName("Test Sftp Configuration");
        propertyConfig.setEnvName(DEV);
        propertyConfig.addProperty("insert", "value");
        propertyConfigRepository.save(propertyConfig);

        PropertyConfigAudit audit1 = new PropertyConfigAudit(propertyConfig, AuditType.ADD, null);
        propertyConfigAuditRepository.save(audit1);

        String configId = propertyConfig.getId();
        assertNotNull("id on saved Item should be not be null", configId);

        propertyConfigRepository.delete(configId);

        audit1.setAuditType(AuditType.DELETE);
        audit1.setId(null);
        propertyConfigAuditRepository.save(audit1);

        List<PropertyConfigAudit> audits = propertyConfigAuditRepository.findAll();
        assertEquals("size should be 2", 2, audits.size());

        PropertyConfigAudit audit = audits.get(0);
        assertEquals("ids should match", configId, audit.getPropertyConfig().getId());
        assertNotNull("not null timestamp", audit.getAuditTimestamp());
        assertEquals("audit type should be ADD", PropertyConfigAudit.AuditType.ADD, audit.getAuditType());
        assertEquals("Environment Name must be the same", DEV, audit.getPropertyConfig().getEnvName());

        PropertyConfigAudit auditDel = audits.get(1);
        assertEquals("ids should match", configId, auditDel.getPropertyConfig().getId());
        assertNotNull("not null timestamp", audit.getAuditTimestamp());
        assertEquals("audit type should be DELETE", PropertyConfigAudit.AuditType.DELETE, auditDel.getAuditType());
        assertEquals("Environment Name must be the same", DEV, auditDel.getPropertyConfig().getEnvName());
    }

    @Test
    public void testPropertyConfigAuditRepositorySearch() {
        PropertyConfig propertyConfig = new PropertyConfig();
        propertyConfig.setName("Test Sftp Configuration");
        propertyConfig.setEnvName(DEV);
        propertyConfig.addProperty("smtp.user", "foo");
        propertyConfig = propertyConfigRepository.save(propertyConfig);
        PropertyConfigAudit audit1 = new PropertyConfigAudit(propertyConfig, AuditType.ADD, null);

        propertyConfigAuditRepository.save(audit1);

        PropertyConfig propertyConfig2 = new PropertyConfig();
        propertyConfig2.setName("Test Sftp Configuration");
        propertyConfig2.setEnvName("QA");
        propertyConfig2.addProperty("smtp.user", "bar");
        propertyConfig2 = propertyConfigRepository.save(propertyConfig2);
        PropertyConfigAudit audit2 = new PropertyConfigAudit(propertyConfig2, AuditType.ADD, null);
        propertyConfigAuditRepository.save(audit2);

        PropertyConfig propertyConfig3 = new PropertyConfig();
        propertyConfig3.setName("MnA");
        propertyConfig3.setEnvName(DEV);
        propertyConfig3.setProperties(Arrays.asList(new PropertyEntry[] {new PropertyEntry("a", "b") }));

        propertyConfig3 = propertyConfigRepository.save(propertyConfig3);
        PropertyConfigAudit audit3 = new PropertyConfigAudit(propertyConfig3, AuditType.ADD, null);
        propertyConfigAuditRepository.save(audit3);

        String configId = propertyConfig.getId();
        assertNotNull("id on saved Item should be not be null", configId);

        List<PropertyConfigAudit> audits = propertyConfigAuditRepository.findAll();
        assertEquals("size is 3", 3, audits.size());
        // search name
        Map<String, String[]> searchFilters = Maps.newHashMap();
        searchFilters.put(PropertyConfigAuditSearchRequest.SEARCH_FILTER_NAME, new String[] {"MnA" });
        PropertyConfigAuditSearchRequest req = new PropertyConfigAuditSearchRequest(searchFilters);
        SearchResponse<PropertyConfigAudit> audits1 = propertyConfigAuditRepository.search(req);
        assertEquals("should be 1 matches", 1, audits1.getSearchResults().size());
        PropertyConfig audit = audits1.getSearchResults().get(0).getPropertyConfig();
        assertEquals("id should match", propertyConfig3.getId(), audit.getId());
        assertEquals("Environment Name must be the same", DEV, audit.getEnvName());

        searchFilters = Maps.newHashMap();
        searchFilters.put(PropertyConfigAuditSearchRequest.SEARCH_FILTER_ENV_NAME, new String[] {DEV });
        req = new PropertyConfigAuditSearchRequest(searchFilters);
        audits1 = propertyConfigAuditRepository.search(req);
        assertEquals("should be 2 matches", 2, audits1.getSearchResults().size());
        audit = audits1.getSearchResults().get(0).getPropertyConfig();
        assertEquals("id should match", configId, audit.getId());
        assertEquals("Environment Name must be the same", DEV, audit.getEnvName());
    }

    @Test
    public void testPropertyConfigAuditRepositorySearchProperties() throws JsonProcessingException {
        PropertyConfig propertyConfig = new PropertyConfig();
        propertyConfig.setName("Test Sftp Configuration");
        propertyConfig.setEnvName(DEV);
        propertyConfig.addProperty("smtp.user", "foo");
        propertyConfig = propertyConfigRepository.save(propertyConfig);
        PropertyConfigAudit audit1 = new PropertyConfigAudit(propertyConfig, AuditType.ADD, null);

        propertyConfigAuditRepository.save(audit1);

        PropertyConfig propertyConfig2 = new PropertyConfig();
        propertyConfig2.setName("Test Sftp Configuration");
        propertyConfig2.setEnvName("QA");
        propertyConfig2.addProperty("smtp.user", "bar");
        propertyConfig2 = propertyConfigRepository.save(propertyConfig2);
        PropertyConfigAudit audit2 = new PropertyConfigAudit(propertyConfig2, AuditType.ADD, null);
        propertyConfigAuditRepository.save(audit2);

        PropertyConfig propertyConfig3 = new PropertyConfig();
        propertyConfig3.setName("MnA");
        propertyConfig3.setEnvName(DEV);
        propertyConfig3.addProperty("smtp.pass", "pass");
        propertyConfig3 = propertyConfigRepository.save(propertyConfig3);
        PropertyConfigAudit audit3 = new PropertyConfigAudit(propertyConfig3, AuditType.ADD, null);
        propertyConfigAuditRepository.save(audit3);

        String configId = propertyConfig.getId();
        assertNotNull("id on saved Item should be not be null", configId);

        List<PropertyConfigAudit> audits = propertyConfigAuditRepository.findAll();
        assertEquals("size is 3", 3, audits.size());

        Map<String, String[]> searchFilters = Maps.newHashMap();
        PropertyConfigAuditSearchRequest req = new PropertyConfigAuditSearchRequest(searchFilters);
        SearchResponse<PropertyConfigAudit> audits1 = propertyConfigAuditRepository.search(req);

        // look for audit's that have a property with sftp.user there are two
        searchFilters.put(PropertyConfigAuditSearchRequest.SEARCH_FILTER_PROPERTY_KEY, new String[] {"smtp.user" });
        PropertyConfigAuditSearchRequest req2 = new PropertyConfigAuditSearchRequest(searchFilters);
        audits1 = propertyConfigAuditRepository.search(req2);
        assertEquals("should be 2 match", 2, audits1.getSearchResults().size());
        ensureMatchingValue(audits1.getSearchResults().get(0), "foo");
        ensureMatchingValue(audits1.getSearchResults().get(1), "bar");

        // look for audit's that have a property with key of sftp.user and value of bar there is one
        searchFilters.put(PropertyConfigAuditSearchRequest.SEARCH_FILTER_PROPERTY_KEY, new String[] {"smtp.user" });
        searchFilters.put(PropertyConfigAuditSearchRequest.SEARCH_FILTER_PROPERTY_VALUE, new String[] {"bar" });
        req2 = new PropertyConfigAuditSearchRequest(searchFilters);
        audits1 = propertyConfigAuditRepository.search(req2);
        assertEquals("should be 2 match", 1, audits1.getSearchResults().size());
        ensureMatchingValue(audits1.getSearchResults().get(0), "bar");

        // look for audit's that have a property with sftp.pass there is one
        searchFilters.clear();
        searchFilters.put(PropertyConfigAuditSearchRequest.SEARCH_FILTER_PROPERTY_KEY, new String[] {"smtp.pass" });
        req2 = new PropertyConfigAuditSearchRequest(searchFilters);
        audits1 = propertyConfigAuditRepository.search(req2);
        assertEquals("should be 1 match", 1, audits1.getSearchResults().size());
        ensureMatchingValue(audits1.getSearchResults().get(0), "pass");

        // look for audit's that have a property with sftp.user (who's value is foo)
        searchFilters.clear();
        searchFilters.put(PropertyConfigAuditSearchRequest.SEARCH_FILTER_PROPERTY_VALUE, new String[] {"foo" });
        req2 = new PropertyConfigAuditSearchRequest(searchFilters);
        audits1 = propertyConfigAuditRepository.search(req2);
        assertEquals("should be 1 match", 1, audits1.getSearchResults().size());
        ensureMatchingValue(audits1.getSearchResults().get(0), "foo");

        // look for audit's that have a property with sftp.user (who's value is bar)
        searchFilters.clear();
        searchFilters.put(PropertyConfigAuditSearchRequest.SEARCH_FILTER_PROPERTY_VALUE, new String[] {"bar" });
        req2 = new PropertyConfigAuditSearchRequest(searchFilters);
        audits1 = propertyConfigAuditRepository.search(req2);
        assertEquals("should be 1 match", 1, audits1.getSearchResults().size());
        ensureMatchingValue(audits1.getSearchResults().get(0), "bar");

    }

    private void ensureMatchingValue(final PropertyConfigAudit inPropertyConfigAudit, final String inString) {
        List<PropertyEntry> properties = inPropertyConfigAudit.getPropertyConfig().getProperties();
        boolean match = false;
        for (PropertyEntry propertyEntry : properties) {
            match = match || inString.equals(propertyEntry.getPropertyValue());
        }
        assertTrue("Value should match", match);
    }

    private void ensureMatchingKey(final PropertyConfigAudit inPropertyConfigAudit, final String inString) {
        List<PropertyEntry> properties = inPropertyConfigAudit.getPropertyConfig().getProperties();
        boolean match = false;
        for (PropertyEntry propertyEntry : properties) {
            match = match || inString.equals(propertyEntry.getPropertyKey());
        }
        assertTrue("Key should match", match);
    }
}

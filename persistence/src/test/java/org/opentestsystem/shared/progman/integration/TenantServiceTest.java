/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.integration;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.List;

import javax.validation.ConstraintViolationException;

import org.bson.types.ObjectId;
import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.shared.progman.domain.Tenant;
import org.opentestsystem.shared.progman.domain.TenantSubscription;
import org.opentestsystem.shared.progman.domain.TenantType;
import org.opentestsystem.shared.progman.service.TenantService;
import org.opentestsystem.shared.progman.transformer.TenantBuilder;
import org.opentestsystem.shared.progman.transformer.TenantSubscriptionBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;

import com.google.common.collect.Lists;

public class TenantServiceTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private TenantService tenantService;
    private Tenant tenant;

    private List<ObjectId> setupTestTenantsWithSubscriptions() {
        final ObjectId componentId0 = new ObjectId();
        final ObjectId componentId1 = new ObjectId();
        final ObjectId componentId2 = new ObjectId();
        final ObjectId componentId3 = new ObjectId();
        final List<ObjectId> objectIds = Lists.newArrayList(componentId0, componentId1, componentId2, componentId3);

        final DateTime effectiveDate = DateTime.now();
        DateTime expirationDate = DateTime.now();
        expirationDate = expirationDate.plusYears(1);
        final List<Tenant> tenantList = Lists.newArrayList(
                new TenantBuilder(new ObjectId().toString(), "name", "description", TenantType.STATE).addTenantSubscriptions(
                        new TenantSubscriptionBuilder(true, effectiveDate, expirationDate).addComponent(componentId0.toString(), "componentName0").build(),
                        new TenantSubscriptionBuilder(true, effectiveDate, expirationDate).addComponent(componentId1.toString(), "componentName1").build()
                        ).build(),
                new TenantBuilder(new ObjectId().toString(), "name2", "description2", TenantType.STATE).addTenantSubscriptions(
                        new TenantSubscriptionBuilder(true, effectiveDate, expirationDate).addComponent(componentId0.toString(), "componentName0").build(),
                        new TenantSubscriptionBuilder(false, effectiveDate, expirationDate).addComponent(componentId1.toString(), "componentName1").build(),
                        new TenantSubscriptionBuilder(true, effectiveDate, expirationDate).addComponent(componentId2.toString(), "componentName2").build()
                        ).build(),
                new TenantBuilder(new ObjectId().toString(), "name3", "description3", TenantType.STATE).addTenantSubscriptions(
                        new TenantSubscriptionBuilder(true, effectiveDate, expirationDate).addComponent(componentId0.toString(), "componentName0").build(),
                        new TenantSubscriptionBuilder(false, effectiveDate, expirationDate).addComponent(componentId3.toString(), "componentName3").build()
                        ).build()
                );

        for (final Tenant tenant : tenantList) {
            this.tenantService.saveTenant(tenant);
        }
        return objectIds;
    }

    @Before
    public void init() {
        this.tenant = new Tenant();
        this.tenant.setName("Wisconsin");
        this.tenant.setType(TenantType.STATE);
    }

    @Test
    public void testSave() {
        this.tenantService.saveTenant(this.tenant);
        final String tenantId = this.tenant.getId();
        assertNotNull("id on saved Item should be not be null", tenantId);

    }

    @Test
    public void testFind() {
        this.tenantService.saveTenant(this.tenant);
        final String tenantId = this.tenant.getId();
        assertNotNull("id on saved Item should be not be null", tenantId);
        final Tenant readObj = this.tenantService.getTenant(tenantId);
        assertEquals(readObj.getName(), "Wisconsin");
    }

    @Test
    public void testRemove() {
        this.tenantService.saveTenant(this.tenant);
        final String tenantId = this.tenant.getId();
        assertNotNull("id on saved Item should be not be null", tenantId);
        this.tenantService.removeTenant(tenantId);
        final Tenant readObj = this.tenantService.getTenant(tenantId);
        assertNull("Item must be null", readObj);
    }

    @Test
    public void testGetTenants() {
        final Tenant savedTenant = this.tenantService.saveTenant(this.tenant);
        assertNotNull("Saved Item should be not be null", savedTenant);
        final Tenant anotherTenant = new Tenant();
        anotherTenant.setName("Madison School District");
        anotherTenant.setType(TenantType.DISTRICT);
        final Tenant anotherSavedTenant = this.tenantService.saveTenant(anotherTenant);
        assertNotNull("Saved Item should be not be null", anotherSavedTenant);
        final List<Tenant> tenants = this.tenantService.getTenants();
        assertNotNull("Tenant List cannot be null", tenants);
        assertEquals("There should be 2 items", tenants.size(), 2);
    }

    public void getTennantByTenantChain() {
        final Tenant savedTenant = this.tenantService.saveTenant(this.tenant);
        assertNotNull("Saved Item should be not be null", savedTenant);
        final Tenant anotherTenant = new Tenant();
        anotherTenant.setName("Madison School District");
        this.tenantService.saveTenant(anotherTenant);
    }

    @Test
    public void testDuplicateTenants() {
        this.tenantService.saveTenant(this.tenant);
        final String tenantId = this.tenant.getId();
        assertNotNull("id on saved Item should be not be null", tenantId);
        try {
            final Tenant duplicateTenant = new Tenant();
            duplicateTenant.setName("Wisconsin");
            duplicateTenant.setType(TenantType.STATE);
            this.tenantService.saveTenant(duplicateTenant);
            fail("it should never come here");
        } catch (final Exception e) {
            assertTrue("Exception should contain error message", e.getLocalizedMessage().startsWith("tenant.already.exists"));
        }
    }

    @Test
    public void testFindByComponentAndSearchVal() {
        setupTestTenantsWithSubscriptions();

        assertThat(this.tenantService.findByComponentAndSearchVal("componentName0", true, "descrip", TenantType.STATE, null).size(), is(equalTo(3)));
        assertThat(this.tenantService.findByComponentAndSearchVal("componentName1", true, "descrip", TenantType.STATE, null).size(), is(equalTo(1)));
        assertThat(this.tenantService.findByComponentAndSearchVal("componentName2", true, "descrip", TenantType.STATE, null).size(), is(equalTo(1)));
        assertThat(this.tenantService.findByComponentAndSearchVal("componentName3", true, "descrip", TenantType.STATE, null).size(), is(equalTo(0)));
        assertThat(this.tenantService.findByComponentAndSearchVal("componentName0", false, "descrip", TenantType.STATE, null).size(), is(equalTo(0)));
        assertThat(this.tenantService.findByComponentAndSearchVal("componentName1", false, "descrip", TenantType.STATE, null).size(), is(equalTo(1)));
        assertThat(this.tenantService.findByComponentAndSearchVal("componentName2", false, "descrip", TenantType.STATE, null).size(), is(equalTo(0)));
        assertThat(this.tenantService.findByComponentAndSearchVal("componentName3", false, "descrip", TenantType.STATE, null).size(), is(equalTo(1)));
        assertThat(this.tenantService.findByComponentAndSearchVal("componentName0", null, "descrip", TenantType.STATE, null).size(), is(equalTo(3)));
        assertThat(this.tenantService.findByComponentAndSearchVal("componentName1", null, "descrip", TenantType.STATE, null).size(), is(equalTo(2)));
        assertThat(this.tenantService.findByComponentAndSearchVal("componentName2", null, "descrip", TenantType.STATE, null).size(), is(equalTo(1)));
        assertThat(this.tenantService.findByComponentAndSearchVal("componentName3", null, "descrip", TenantType.STATE, null).size(), is(equalTo(1)));
        assertThat(this.tenantService.findByComponentAndSearchVal("componentName0", true, "name3", TenantType.STATE, null).size(), is(equalTo(1)));

        assertThat(this.tenantService.findByComponentAndSearchVal("componentName0", true, "", TenantType.STATE, new PageRequest(0, 2)).size(), is(equalTo(2)));
        assertThat(this.tenantService.findByComponentAndSearchVal("componentName0", true, "", TenantType.STATE, new PageRequest(1, 2)).size(), is(equalTo(1)));
    }

    @Test
    public void testCantSaveSubscriptionWithOutEffectiveDate() {
        setupTestTenantsWithSubscriptions();

        final List<Tenant> tens = this.tenantService.findByComponentAndSearchVal("componentName0", true, "", TenantType.STATE, new PageRequest(1, 2));
        final Tenant ten = tens.get(0);

        final TenantSubscription sub = ten.getTenantSubscriptions().get(0);
        sub.setEffectiveDate(null);
        ConstraintViolationException constraintViolationException = null;
        try {
            this.tenantService.saveTenant(ten);
        } catch (final ConstraintViolationException e) {
            constraintViolationException = e;
        }
        assertNotNull("A validation error for missing date should have been thrown", constraintViolationException);
        assertTrue(constraintViolationException.getConstraintViolations().iterator().next().getMessage().contains("tenantSubscription.effectiveDate.required"));
    }
    
    @Test
    public void testExpirationDateGreaterEqualToEffectiveDate() {
        setupTestTenantsWithSubscriptions();

        final List<Tenant> tens = this.tenantService.findByComponentAndSearchVal("componentName0", true, "", TenantType.STATE, new PageRequest(1, 2));
        final Tenant ten = tens.get(0);

        final TenantSubscription sub = ten.getTenantSubscriptions().get(0);
        sub.setEffectiveDate(DateTime.now());
        sub.setExpirationDate(DateTime.now());
        this.tenantService.saveTenant(ten);

        DateTime effectiveDate = DateTime.now();
        effectiveDate = effectiveDate.minusDays(1);
        sub.setEffectiveDate(effectiveDate);

        this.tenantService.saveTenant(ten);

        effectiveDate = DateTime.now();
        effectiveDate = effectiveDate.plusDays(1);
        sub.setEffectiveDate(effectiveDate);

        ConstraintViolationException constraintViolationException = null;
        try {
            this.tenantService.saveTenant(ten);
        } catch (final ConstraintViolationException e) {
            constraintViolationException = e;
        }
        assertNotNull("A validation error for missing date should have been thrown", constraintViolationException);
        assertTrue(constraintViolationException.getConstraintViolations().iterator().next().getMessage().contains("tenantSubscription.expirationDate.gtEffectiveDate"));
    }

    @Test
    public void testFindByNameRegexOrDescriptionRegex() {
        final Tenant oneTenant = new Tenant();
        oneTenant.setName("MN_MV_DISTRICT");
        oneTenant.setDescription("(Minnesota) Mounds View School District");
        oneTenant.setType(TenantType.DISTRICT);
        this.tenantService.saveTenant(oneTenant);

        final Tenant anotherTenant = new Tenant();
        anotherTenant.setName("MN_IRON_DISTRICT");
        anotherTenant.setDescription("(Minnesota) Irondale School District");
        anotherTenant.setType(TenantType.DISTRICT);
        this.tenantService.saveTenant(anotherTenant);

        assertTrue("2 tenants should be found!", this.tenantService.findByNameRegexOrDescriptionRegexAndType("", "", TenantType.DISTRICT, null).size() == 2);
        assertTrue("No tenants should be found!", this.tenantService.findByNameRegexOrDescriptionRegexAndType("name", "description", TenantType.DISTRICT, null).size() == 0);
        assertTrue("1 tenant should be found!", this.tenantService.findByNameRegexOrDescriptionRegexAndType("name", "Mounds View", TenantType.DISTRICT, null).size() == 1);
        assertTrue("2 tenants should be found!", this.tenantService.findByNameRegexOrDescriptionRegexAndType("MN", "description", TenantType.DISTRICT, null).size() == 2);
        assertTrue("1 tenant should be found!", this.tenantService.findByNameRegexOrDescriptionRegexAndType("MN", "description", TenantType.DISTRICT, new PageRequest(0, 1)).size() == 1);
        assertTrue("2 tenant should be found!", this.tenantService.findByNameRegexOrDescriptionRegexAndType("name", "(Minnesota)", TenantType.DISTRICT, null).size() == 2);
        assertTrue("0 tenants should be found!", this.tenantService.findByNameRegexOrDescriptionRegexAndType("name", "Minnesota%)&@#", TenantType.DISTRICT, null).size() == 0);
    }

}

/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.integration;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.progman.domain.Asset;
import org.opentestsystem.shared.progman.domain.AssetPool;
import org.opentestsystem.shared.progman.domain.Tenant;
import org.opentestsystem.shared.progman.domain.TenantType;
import org.opentestsystem.shared.progman.service.AssetPoolService;
import org.opentestsystem.shared.progman.service.TenantService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.util.CollectionUtils;

import com.mongodb.gridfs.GridFSFile;

public class AssetPoolServiceTest extends AbstractPersistenceEmbeddedTest {

    private static final String DEFAULT_TENANT_NAME = "WISCONSIN";
    private static final String CONTENT_TYPE = "image/jpeg";

    @Autowired
    private AssetPoolService assetPoolService;
    @Autowired
    private TenantService tenantService;

    private Tenant tenant;

    @Value("classpath:Desert.jpg")
    private byte[] testFile;

    @Before
    public void loadTenant() {
        tenant = new Tenant();
        tenant.setName(DEFAULT_TENANT_NAME);
        tenant.setType(TenantType.STATE);
        tenant = tenantService.saveTenant(tenant);
    }

    @Test
    public void saveAssetPoolTest() {
        AssetPool saved = assetPoolService.saveAssetPool(createDummyAssetPool());
        assertNotNull("saved asset pool", saved);
        AssetPool savedAssetPool = assetPoolService.getAssetPool(saved.getId());
        assertNotNull("saved asset pool", savedAssetPool);
    }

    @Test
    public void saveAssetFileTest() {
        AssetPool savedAssetPool = assetPoolService.saveAssetPool(createDummyAssetPool());
        assertNotNull("saved asset pool", savedAssetPool);

        assetPoolService.saveAssetFile(savedAssetPool.getId(), "testFile", testFile, CONTENT_TYPE);

        AssetPool assetPoolWithFile = assetPoolService.getAssetPool(savedAssetPool.getId());
        assertNotNull("saved asset", assetPoolWithFile);
        Asset asset = assetPoolWithFile.getAssets().get(0);
        GridFSFile file = assetPoolService.getAssetFile(asset.getAssetFileGridId());
        assertNotNull("File does not exist", file);
        assertEquals("File names are different", asset.getAssetFileName(), file.getFilename());
    }

    @Test
    public void saveDuplicateAssetFileTest() {
        AssetPool savedAssetPool = assetPoolService.saveAssetPool(createDummyAssetPool());
        assertNotNull("saved asset pool", savedAssetPool);

        assetPoolService.saveAssetFile(savedAssetPool.getId(), "testFile", testFile, CONTENT_TYPE);
        AssetPool assetPoolWithFile = assetPoolService.getAssetPool(savedAssetPool.getId());
        assertNotNull("saved asset", assetPoolWithFile);
        Asset asset = assetPoolWithFile.getAssets().get(0);
        GridFSFile file = assetPoolService.getAssetFile(asset.getAssetFileGridId());
        assertNotNull("File does not exist", file);
        assertEquals("File names are different", asset.getAssetFileName(), file.getFilename());

        try {
            assetPoolService.saveAssetFile(savedAssetPool.getId(), "testFile", testFile, CONTENT_TYPE);
            fail("Exception should occur when saving duplicate asset files");
        } catch (LocalizedException e) {
            assertEquals("exception message not correct", "assetPool.duplicate.assets", e.getMessage());
        }
    }

    @Test
    public void deleteAssetFileTest() {
        AssetPool savedAssetPool = assetPoolService.saveAssetPool(createDummyAssetPool());
        assertNotNull("saved asset pool", savedAssetPool);

        assetPoolService.saveAssetFile(savedAssetPool.getId(), "testFile", testFile, CONTENT_TYPE);

        AssetPool assetPoolWithFile = assetPoolService.getAssetPool(savedAssetPool.getId());
        assertNotNull("saved asset", assetPoolWithFile);
        Asset asset = assetPoolWithFile.getAssets().get(0);
        GridFSFile file = assetPoolService.getAssetFile(asset.getAssetFileGridId());
        assertNotNull("File does not exist", file);

        assetPoolService.deleteAssetFile(assetPoolWithFile.getId(), asset.getAssetFileGridId());
        GridFSFile deletedFile = assetPoolService.getAssetFile(asset.getAssetFileGridId());
        assertNull("File must not exist", deletedFile);
        AssetPool assetPoolWithDeletedFile = assetPoolService.getAssetPool(savedAssetPool.getId());
        assertTrue("Asset pool must not contain the deleted asset", CollectionUtils.isEmpty(assetPoolWithDeletedFile.getAssets()));
    }

    private AssetPool createDummyAssetPool() {
        AssetPool assetPool = new AssetPool();
        assetPool.setTenantId(tenant.getId());
        assetPool.setName("testPool");
        return assetPool;
    }

}

/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.transformer;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.List;

import org.joda.time.DateTime;
import org.junit.Test;
import org.opentestsystem.shared.progman.domain.Component;
import org.opentestsystem.shared.progman.domain.Tenant;
import org.opentestsystem.shared.progman.domain.TenantType;

import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;

public class TenantComponentTransformerTest {

    @Test
    public void transformerTransformsCorrectly() {

        final DateTime effectiveDate = DateTime.now();
        DateTime expirationDate = DateTime.now();
        expirationDate = expirationDate.plusYears(1);
        final List<Tenant> tenantList = Lists.newArrayList(
                new TenantBuilder("1", "name", "description", TenantType.STATE).addTenantSubscriptions(
                        new TenantSubscriptionBuilder(true, effectiveDate, expirationDate).addComponent("1", "componentName").build(),
                        new TenantSubscriptionBuilder(true, effectiveDate, expirationDate).addComponent("2", "componentName").build(),
                        new TenantSubscriptionBuilder(true, effectiveDate, expirationDate).addComponent("3", "componentName").build()
                        ).build(),
                new TenantBuilder("2", "name2", "description2", TenantType.STATE).addTenantSubscriptions(
                        new TenantSubscriptionBuilder(true, effectiveDate, expirationDate).addComponent("1", "componentName").build(),
                        new TenantSubscriptionBuilder(true, effectiveDate, expirationDate).addComponent("2", "componentName").build(),
                        new TenantSubscriptionBuilder(true, effectiveDate, expirationDate).addComponent("3", "componentName").build()
                        ).build(),
                new TenantBuilder("3", "name2", "description2", TenantType.STATE).addTenantSubscriptions(
                        new TenantSubscriptionBuilder(true, effectiveDate, expirationDate).addComponent("2", "componentName").build(),
                        new TenantSubscriptionBuilder(true, effectiveDate, expirationDate).addComponent("3", "componentName").build(),
                        new TenantSubscriptionBuilder(true, effectiveDate, expirationDate).addComponent("4", "componentName").build()
                        ).build()
                );

        final Component component = new Component();
        component.setId("1");
        component.setName("newComponentName");

        final List<Tenant> transformedTenantList = Lists.newArrayList(Iterables.transform(tenantList, new TenantComponentTransformer(component, true)));

        assertThat(transformedTenantList.get(0).getTenantSubscriptions().get(0).getComponent(), is(not(equalTo(component))));
        assertThat(transformedTenantList.get(0).getTenantSubscriptions().get(1).getComponent(), is(not(equalTo(component))));
        assertThat(transformedTenantList.get(0).getTenantSubscriptions().get(2).getComponent(), is(equalTo(component)));
        assertThat(transformedTenantList.get(0).getTenantSubscriptions().get(2).getComponent().getName(), is(equalTo("newComponentName")));
        assertThat(transformedTenantList.get(1).getTenantSubscriptions().get(0).getComponent(), is(not(equalTo(component))));
        assertThat(transformedTenantList.get(1).getTenantSubscriptions().get(1).getComponent(), is(not(equalTo(component))));
        assertThat(transformedTenantList.get(1).getTenantSubscriptions().get(2).getComponent(), is(equalTo(component)));
        assertThat(transformedTenantList.get(1).getTenantSubscriptions().get(2).getComponent().getName(), is(equalTo("newComponentName")));
        assertThat(transformedTenantList.get(2).getTenantSubscriptions().get(0).getComponent(), is(not(equalTo(component))));
        assertThat(transformedTenantList.get(2).getTenantSubscriptions().get(1).getComponent(), is(not(equalTo(component))));
        assertThat(transformedTenantList.get(2).getTenantSubscriptions().get(2).getComponent(), is(not(equalTo(component))));
    }

    @Test
    public void transformerTransformsNullTenantsCorrectly() {
        final Component component = new Component();
        component.setId("1");
        component.setName("newComponentName");
        final TenantComponentTransformer transformer = new TenantComponentTransformer(component, true);

        // null tenant
        Tenant tenant = null;
        Tenant transformedTenant = transformer.apply(tenant);
        assertThat(transformedTenant, is(nullValue()));

        // null tennat subscriptions
        tenant = new TenantBuilder("1", "name", "description", TenantType.STATE).build();
        tenant.setTenantSubscriptions(null);
        transformedTenant = transformer.apply(tenant);
        assertThat(transformedTenant, is(not(nullValue())));
        assertThat(transformedTenant.getId(), is("1"));
        assertThat(transformedTenant.getName(), is("name"));
        assertThat(transformedTenant.getTenantSubscriptions(), is(nullValue()));
    }
}

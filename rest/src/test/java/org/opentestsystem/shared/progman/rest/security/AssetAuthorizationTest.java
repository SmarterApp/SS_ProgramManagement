/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.rest.security;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.progman.domain.AssetGroup;
import org.opentestsystem.shared.progman.domain.Component;
import org.opentestsystem.shared.progman.domain.Permissions;
import org.opentestsystem.shared.progman.domain.Tenant;
import org.opentestsystem.shared.progman.domain.TenantType;
import org.opentestsystem.shared.progman.rest.AbstractSecuredRestEmbeddedMongoTest;
import org.opentestsystem.shared.progman.service.AssetGroupService;
import org.opentestsystem.shared.progman.service.TenantService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

@ActiveProfiles({"special.role.required"})
public class AssetAuthorizationTest extends AbstractSecuredRestEmbeddedMongoTest {
    private static final String ASSET_GROUP_URL = "/assetGroup";

    private static final String DEFAULT_COMPONENT = "2222";

    private static final String DEFAULT_TENANT_NAME = "WISCONSIN";

    @Autowired
    private AssetGroupService assetGroupService;
    @Autowired
    private TenantService tenantService;

    private List<Permissions> permissions;
    private AssetGroup savedAssetGroup;
    private Tenant tenant;

    private Component component;


    @Before
    public void loadTenant() {
        tenant = new Tenant();
        tenant.setName(DEFAULT_TENANT_NAME);
        tenant.setType(TenantType.STATE);
        tenant = tenantService.saveTenant(tenant);
    }

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() {
        permissions = Lists.newArrayList();
    }

    void setupAssetGroup() {
        this.savedAssetGroup = saveSampleAssetGroup();
    }

    /**************************************** Asset Group ****************************************/
    @Test
    public void testAssetGroupRead() {
        setupAssetGroup();
        permissions.add(Permissions.PROGMAN_READ);
        setUserWithRoles(permissions);
        final AssetGroup fetchedAssetGroup = callGETRestService(ASSET_GROUP_URL + "/" + this.savedAssetGroup.getId(), AssetGroup.class);
        assertThat(fetchedAssetGroup, is(notNullValue()));
        assertThat(fetchedAssetGroup.getId(), is(notNullValue()));
    }

    @Test
    public void testAssetGroupModify() {
        permissions.add(Permissions.PROGMAN_ADMIN);
        setUserWithRoles(permissions);
        final Map<String, Object> assetGroupParams = buildAssetGroupMap();
        assertThat(assetGroupService.getAssetGroup(this.savedAssetGroup.getId()), is(notNullValue()));
        assetGroupParams.put("id", savedAssetGroup.getId());
        assetGroupParams.put("component", ImmutableMap.of("id", component.getId(), "name", "New Text Description"));
        final AssetGroup updatedAssetGroup = callPUTRestService(ASSET_GROUP_URL + "/" + this.savedAssetGroup.getId(), assetGroupParams, AssetGroup.class);
        assertThat(updatedAssetGroup, is(notNullValue()));
        assertThat(updatedAssetGroup.getComponent().getName(), is(equalTo("New Text Description")));
        assertThat(updatedAssetGroup.getId(), is(notNullValue()));
    }

    @Test
    public void testAssetGroupReadFail() {
        setupAssetGroup();
        permissions.add(Permissions.PROGMAN_ADMIN);
        setUserWithRoles(permissions);
        final AssetGroup fetchedAssetGroup = callGETRestService(ASSET_GROUP_URL + "/" + this.savedAssetGroup.getId(), AssetGroup.class, status().isUnauthorized());
        assertThat(fetchedAssetGroup, is(notNullValue()));
        assertThat(fetchedAssetGroup.getId(), is(nullValue()));
    }

    @Test
    public void testAssetGroupModifyFail() {
        permissions.add(Permissions.PROGMAN_READ);
        setUserWithRoles(permissions);
        final Map<String, Object> assetGroupParams = buildAssetGroupMap();
        assetGroupParams.put("textDescription", "New Text Description");
        final AssetGroup updatedAssetGroup = callPUTRestService(ASSET_GROUP_URL + "/" + assetGroupParams.get("id"), assetGroupParams, AssetGroup.class, status()
                .isUnauthorized());
        assertThat(updatedAssetGroup, is(notNullValue()));
    }

    /***********************************************************************************************/

    private AssetGroup saveSampleAssetGroup() {

        AssetGroup assetGroup = new AssetGroup();
        assetGroup.setComponent(buildComponent(DEFAULT_COMPONENT, "overseer"));
        assetGroup.setTenant(tenant);
        savedAssetGroup = this.assetGroupService.saveAssetGroup(assetGroup);
        return savedAssetGroup;
    }

    private Map<String, Object> buildAssetGroupMap() {
        saveSampleAssetGroup();
        Map<String, Object> params = Maps.newHashMap();
        params.put("component", ImmutableMap.of("id", component.getId(), "name", "overseer"));
        params.put("tenant", ImmutableMap.of("id", tenant.getId()));
        return params;
    }

    private Component buildComponent(final String componentId, final String componentName) {
        component = new Component();
        component.setId(componentId);
        component.setName(componentName);
        return component;
    }

}

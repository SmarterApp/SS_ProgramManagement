/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.rest;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.shared.progman.domain.AssetGroup;
import org.opentestsystem.shared.progman.domain.Component;
import org.opentestsystem.shared.progman.domain.search.ComponentSearchRequest;
import org.opentestsystem.shared.search.domain.SearchResponse;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;

public class ComponentControllerTest extends AbstractRestEmbeddedMongoTest {

    private Map<String, Object> params;

    @Before
    public void buildParams() {
        params = Maps.newHashMap();
        params.put("name", "Component Name");
    }

    @Test
    public void saveComponent() throws InterruptedException {
        Component savedComponent = callPOSTRestService("/component", params, Component.class);
        assertEquals("Component should be created", 1, mongoTemplate.findAll(Component.class).size());
        assertNotNull(savedComponent);
    }

    @Test
    public void updateComponent() throws InterruptedException {
        Component savedComponent = callPOSTRestService("/component", params, Component.class);
        assertNotNull(savedComponent);
        params.put("id", savedComponent.getId());
        params.put("name", "Component Name");
        Component updatedComponent = callPUTRestService("/component/" + savedComponent.getId(), params, Component.class);
        assertNotNull(updatedComponent);
        assertEquals("Component should be updated", updatedComponent.getName(), "Component Name");
    }

    @Test
    public void updateComponentFailures() throws InterruptedException {
        Component savedComponent = callPOSTRestService("/component", params, Component.class);
        assertNotNull(savedComponent);

        Map<String, List<String>> errorMessages = callPUTWithBadData("/component/" + savedComponent.getId(), null);
        assertApplicationErrorMessageReturned(errorMessages, "component.invalid.id");

        errorMessages = callPUTWithBadData("/component/" + savedComponent.getId(), params);
        assertApplicationErrorMessageReturned(errorMessages, "component.invalid.id");

        params.put("id", "invalid-id");
        errorMessages = callPUTWithBadData("/component/" + savedComponent.getId(), params);
        assertApplicationErrorMessageReturned(errorMessages, "component.invalid.id");
    }

    @Test
    public void findComponent() throws InterruptedException {
        Component savedComponent = callPOSTRestService("/component", params, Component.class);
        assertEquals("Component should be created", 1, mongoTemplate.findAll(Component.class).size());
        assertNotNull(savedComponent);
        Component fetchedComponent = callGETRestService("/component/" + savedComponent.getId(), Component.class);
        assertNotNull("Component was null!", fetchedComponent);
    }

    @Test
    public void testRemoveComponent() throws InterruptedException {
        Component savedComponent = callPOSTRestService("/component", params, Component.class);

        assertEquals("Component should be created", 1, mongoTemplate.findAll(Component.class).size());
        assertNotNull(savedComponent);
        try {
            callDeleteRestService("/component/" + savedComponent.getId());
        } catch (Exception e) {
            fail("Cannot delete configuration");
        }

        Component fetchedComponent = callGETRestService("/component/" + savedComponent.getId(), Component.class);
        assertNull("Component must be null!", fetchedComponent);
    }

    @Test
    public void findComponentByName() throws InterruptedException {
        Component savedComponent = callPOSTRestService("/component", params, Component.class);
        assertEquals("Component should be created", 1, mongoTemplate.findAll(Component.class).size());
        assertNotNull(savedComponent);
        Component fetchedComponent = callGETRestService("/component/name/Component Name", Component.class);
        assertNotNull("Component was null!", fetchedComponent);
        fetchedComponent = callGETRestService("/component/name/notthere", Component.class);
        assertNull("Component should be null!", fetchedComponent);
    }

    @SuppressWarnings("unchecked")
    @Test
    public void searchComponentTest() {
        Map<String, Object> componentParams1 = ImmutableMap.of("name", (Object) "component1");
        callPOSTRestService("/component", componentParams1, Component.class);

        Map<String, Object> componentParams2 = ImmutableMap.of("name", (Object) "component2");
        callPOSTRestService("/component", componentParams2, Component.class);
        assertEquals("2 components should be created", 2, mongoTemplate.findAll(Component.class).size());

        Map<String, String> params = Maps.newHashMap();
        params.put(ComponentSearchRequest.COMPONENT_NAME, "component1");
        SearchResponse<AssetGroup> resp = callGETRestService("/component" + buildQueryString(params), SearchResponse.class);
        assertNotNull(resp);
        assertEquals("one should be found", 1, resp.getReturnCount());

        params.clear();
        params.put(ComponentSearchRequest.COMPONENT_NAME, "component2");
        resp = callGETRestService("/component" + buildQueryString(params), SearchResponse.class);
        assertNotNull(resp);
        assertEquals("one should be found", 1, resp.getReturnCount());

        params.clear();
        params.put(ComponentSearchRequest.COMPONENT_NAME, "invalid");
        resp = callGETRestService("/component" + buildQueryString(params), SearchResponse.class);
        assertNotNull(resp);
        assertEquals("zero should be found", 0, resp.getReturnCount());

        params.clear();
        params.put(ComponentSearchRequest.COMPONENT_NAME, "component");
        resp = callGETRestService("/component" + buildQueryString(params), SearchResponse.class);
        assertNotNull(resp);
        assertEquals("two should be found", 2, resp.getReturnCount());
    }

}

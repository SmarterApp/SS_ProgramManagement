/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.rest;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.shared.progman.domain.Tenant;
import org.opentestsystem.shared.search.domain.SearchResponse;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;

public class TenantControllerTest extends AbstractRestEmbeddedMongoTest {

    private Map<String, Object> params;

    private static final String POST_URL = "/tenant";
    private static final String URL_PREFIX = "/tenant/";

    @Before
    public void buildParams() {
        params = Maps.newHashMap();
        params.put("name", "Wisconsin");
        params.put("type", "STATE");
    }

    @Test
    public void saveTenant() throws InterruptedException {
        Tenant savedTenant = callPOSTRestService(POST_URL, params, Tenant.class);
        assertEquals("Tenant should be created", 1, mongoTemplate.findAll(Tenant.class).size());
        assertNotNull("Tenant was null", savedTenant);
    }

    @Test
    public void updateTenant() throws InterruptedException {
        Tenant savedTenant = callPOSTRestService(POST_URL, params, Tenant.class);
        assertNotNull("Tenant was null", savedTenant);
        params.put("id", savedTenant.getId());
        params.put("name", "Dane");
        Tenant updatedTenant = callPUTRestService(URL_PREFIX + savedTenant.getId(), params, Tenant.class);
        assertNotNull("Tenant was null", updatedTenant);
        assertEquals("Tenant should be updated", updatedTenant.getName(), "Dane");
    }

    @Test
    public void updateTenantFailures() throws InterruptedException {
        Tenant savedTenant = callPOSTRestService(POST_URL, params, Tenant.class);
        assertNotNull("Tenant was null", savedTenant);

        Map<String, List<String>> errorMessages = callPUTWithBadData("/tenant/" + savedTenant.getId(), null);
        assertApplicationErrorMessageReturned(errorMessages, "tenant.invalid.id");

        errorMessages = callPUTWithBadData("/tenant/" + savedTenant.getId(), params);
        assertApplicationErrorMessageReturned(errorMessages, "tenant.invalid.id");

        params.put("id", "invalid-id");
        errorMessages = callPUTWithBadData("/tenant/" + savedTenant.getId(), params);
        assertApplicationErrorMessageReturned(errorMessages, "tenant.invalid.id");
    }

    @Test
    public void findTenant() throws InterruptedException {
        Tenant savedTenant = callPOSTRestService(POST_URL, params, Tenant.class);
        assertEquals("Tenant should be created", 1, mongoTemplate.findAll(Tenant.class).size());
        assertNotNull("Tenant was null", savedTenant);
        Tenant fetchedTenant = callGETRestService(URL_PREFIX + savedTenant.getId(), Tenant.class);
        assertNotNull("Tenant was null!", fetchedTenant);
    }

    @SuppressWarnings("unchecked")
    @Test
    public void findTenants() throws InterruptedException {
        List<Tenant> fetchedTenants = callGETRestService("/tenants", List.class);
        assertEquals("0 tenants should be found", fetchedTenants.size(), 0);

        params.put("name", "tenant1");
        callPOSTRestService(POST_URL, params, Tenant.class);
        params.put("name", "tenant2");
        callPOSTRestService(POST_URL, params, Tenant.class);
        params.put("name", "tenant3");
        callPOSTRestService(POST_URL, params, Tenant.class);

        List<Tenant> fetchedTenants2 = callGETRestService("/tenants", List.class);
        assertEquals("3 tenants should be found", fetchedTenants2.size(), 3);
    }

    @Test
    public void removeTenant() throws InterruptedException {
        Tenant savedTenant = callPOSTRestService(POST_URL, params, Tenant.class);

        assertEquals("Tenant should be created", 1, mongoTemplate.findAll(Tenant.class).size());
        assertNotNull("Tenant was null", savedTenant);
        try {
            callDeleteRestService(URL_PREFIX + savedTenant.getId());
        } catch (Exception e) {
            fail("Cannot delete configuration");
        }

        Tenant fetchedTenant = callGETRestService(URL_PREFIX + savedTenant.getId(), Tenant.class);
        assertNull("Tenant must be null!", fetchedTenant);
    }

    @SuppressWarnings("unchecked")
    @Test
    public void findTenantByName() throws InterruptedException {
        Tenant savedTenant = callPOSTRestService(POST_URL, params, Tenant.class);
        assertEquals("Tenant should be created", 1, mongoTemplate.findAll(Tenant.class).size());
        assertNotNull(savedTenant);
        SearchResponse<Tenant> resp = callGETRestService("/tenant?name=Wisconsin", SearchResponse.class);
        assertThat(resp.getReturnCount(), is(1));
        resp = callGETRestService("/tenant?name=notthere", SearchResponse.class);
        assertThat(resp.getReturnCount(), is(0));
    }

    @SuppressWarnings("unchecked")
    @Test
    public void searchTenant() {
        Map<String, Object> tenantParams1 = ImmutableMap.of("name", (Object) "tenant1", "type", "STATE");
        callPOSTRestService("/tenant", tenantParams1, Tenant.class);

        Map<String, Object> tenantParams2 = ImmutableMap.of("name", (Object) "tenant2", "type", "STATE");
        callPOSTRestService("/tenant", tenantParams2, Tenant.class);

        Map<String, Object> tenantParams3 = ImmutableMap.of("name", (Object) "tenant3", "type", "DISTRICT");
        callPOSTRestService("/tenant", tenantParams3, Tenant.class);

        Map<String, Object> tenantParams4 = ImmutableMap.of("name", (Object) "tenant4", "type", "DISTRICT");
        callPOSTRestService("/tenant", tenantParams4, Tenant.class);
        assertEquals("4 tenants should be created", 4, mongoTemplate.findAll(Tenant.class).size());

        Map<String, String> params = Maps.newHashMap();
        params.put("name", "tenant1");
        SearchResponse<Tenant> resp = callGETRestService("/tenant" + buildQueryString(params), SearchResponse.class);
        assertNotNull(resp);
        assertEquals("one should be found", 1, resp.getReturnCount());

        params.clear();
        params.put("name", "tenant2");
        resp = callGETRestService("/tenant" + buildQueryString(params), SearchResponse.class);
        assertNotNull(resp);
        assertEquals("one should be found", 1, resp.getReturnCount());

        params.clear();
        params.put("name", "invalid");
        resp = callGETRestService("/tenant" + buildQueryString(params), SearchResponse.class);
        assertNotNull(resp);
        assertEquals("zero should be found", 0, resp.getReturnCount());

        params.clear();
        params.put("name", "tenant");
        resp = callGETRestService("/tenant" + buildQueryString(params), SearchResponse.class);
        assertNotNull(resp);
        assertEquals("four should be found", 4, resp.getReturnCount());

        params.clear();
        params.put("type", "STATE");
        resp = callGETRestService("/tenant" + buildQueryString(params), SearchResponse.class);
        assertNotNull(resp);
        assertEquals("two should be found", 2, resp.getReturnCount());
    }

    @SuppressWarnings("unchecked")
    @Test
    public void findTenantsBySearchVal() {
        Map<String, Object> tenantParams1 = ImmutableMap.of("name", (Object) "tenant1", "type", "STATE");
        callPOSTRestService("/tenant", tenantParams1, Tenant.class);

        Map<String, Object> tenantParams2 = ImmutableMap.of("name", (Object) "tenant2", "type", "STATE");
        callPOSTRestService("/tenant", tenantParams2, Tenant.class);

        Map<String, Object> tenantParams3 = ImmutableMap.of("name", (Object) "tenant3", "type", "DISTRICT");
        callPOSTRestService("/tenant", tenantParams3, Tenant.class);

        Map<String, Object> tenantParams4 = ImmutableMap.of("name", (Object) "tenant4", "type", "DISTRICT");
        callPOSTRestService("/tenant", tenantParams4, Tenant.class);
        assertEquals("4 tenants should be created", 4, mongoTemplate.findAll(Tenant.class).size());

        Map<String, String> params = Maps.newHashMap();
        params.put("searchVal", "tenant1");

        List<Tenant> resp = callGETRestService("/tenantsBySearchVal" + buildQueryString(params), List.class);
        assertNotNull(resp);
        assertEquals("one should be found", 1, resp.size());

        params.clear();
        params.put("searchVal", "tenant2");
        resp = callGETRestService("/tenantsBySearchVal" + buildQueryString(params), List.class);
        assertNotNull(resp);
        assertEquals("one should be found", 1, resp.size());

        params.clear();
        params.put("searchVal", "invalid");
        resp = callGETRestService("/tenantsBySearchVal" + buildQueryString(params), List.class);
        assertNotNull(resp);
        assertEquals("zero should be found", 0, resp.size());

        params.clear();
        params.put("searchVal", "tenant");
        resp = callGETRestService("/tenantsBySearchVal" + buildQueryString(params), List.class);
        assertNotNull(resp);
        assertEquals("four should be found", 4, resp.size());

        params.clear();
        params.put("tenantType", "STATE");
        resp = callGETRestService("/tenantsBySearchVal" + buildQueryString(params), List.class);
        assertNotNull(resp);
        assertEquals("two should be found", 2, resp.size());

        params.clear();
        params.put("searchVal", "tenant1");
        params.put("tenantType", "STATE");
        resp = callGETRestService("/tenantsBySearchVal" + buildQueryString(params), List.class);
        assertNotNull(resp);
        assertEquals("one should be found", 1, resp.size());

        params.clear();
        params.put("searchVal", "tenant");
        params.put("tenantType", "STATE");
        resp = callGETRestService("/tenantsBySearchVal" + buildQueryString(params), List.class);
        assertNotNull(resp);
        assertEquals("two should be found", 2, resp.size());

        params.clear();
        params.put("searchVal", "invalid");
        params.put("tenantType", "STATE");
        resp = callGETRestService("/tenantsBySearchVal" + buildQueryString(params), List.class);
        assertNotNull(resp);
        assertEquals("zero should be found", 0, resp.size());
    }

    @SuppressWarnings("unchecked")
    @Test
    public void findInGoodStandingTenantsByComponentIdNoResult() {
        List<Tenant> resp = callGETRestService("/tenant/component/name/nonExistingComponent", List.class);
        assertNotNull(resp);
        assertThat(resp.size(), is(0));
    }

    @SuppressWarnings("unchecked")
    @Test
    public void findInGoodStandingTenantsByComponentId() {
        Map<String, Object> subscription1 = ImmutableMap.of("component", (Object) ImmutableMap.of("id", "522632aa9597c43db881b5b9", "name", "component0"), "inGoodStanding", true, "effectiveDate",
                "2013-11-21", "expirationDate", "2013-11-23");
        Map<String, Object> tenantParams1 = ImmutableMap.of("name", (Object) "tenant1", "type", "STATE", "tenantSubscriptions", ImmutableList.of(subscription1));
        callPOSTRestService("/tenant", tenantParams1, Tenant.class);

        Map<String, Object> subscription2 = ImmutableMap.of("component", (Object) ImmutableMap.of("id", "522632aa9597c43db881b5b9", "name", "component0"), "inGoodStanding", false, "effectiveDate",
                "2013-11-21", "expirationDate", "2013-11-23");
        Map<String, Object> tenantParams2 = ImmutableMap.of("name", (Object) "tenant2", "type", "STATE", "tenantSubscriptions", ImmutableList.of(subscription2));
        callPOSTRestService("/tenant", tenantParams2, Tenant.class);

        List<Tenant> resp = callGETRestService("/tenant/component/name/component0", List.class);
        assertThat(resp.size(), is(2));

        resp = callGETRestService("/tenant/component/name/component0?inGoodStanding=true", List.class);
        assertThat(resp.size(), is(1));

        resp = callGETRestService("/tenant/component/name/component0?inGoodStanding=false", List.class);
        assertThat(resp.size(), is(1));

        resp = callGETRestService("/tenant/component/name/component0?page.size=1", List.class);
        assertThat(resp.size(), is(1));

        resp = callGETRestService("/tenant/component/name/component0?tenantType=STATE", List.class);
        assertThat(resp.size(), is(2));

        resp = callGETRestService("/tenant/component/name/component0?tenantType=DISTRICT", List.class);
        assertThat(resp.size(), is(0));

        resp = callGETRestService("/tenant/component/name/component0?searchVal=tenant", List.class);
        assertThat(resp.size(), is(2));

        resp = callGETRestService("/tenant/component/name/component0?searchVal=tenant1", List.class);
        assertThat(resp.size(), is(1));

        resp = callGETRestService("/tenant/component/name/component0?searchVal=tenant11", List.class);
        assertThat(resp.size(), is(0));
    }
}

/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.rest;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.shared.progman.domain.Asset.AssetType;
import org.opentestsystem.shared.progman.domain.AssetGroup;
import org.opentestsystem.shared.progman.domain.Tenant;
import org.opentestsystem.shared.progman.domain.TenantType;
import org.opentestsystem.shared.progman.domain.search.AssetGroupSearchRequest;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.ResponseError;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.gridfs.GridFsTemplate;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

public class AssetGroupControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String COMPONENT_PREFIX = "MnA";

    private static final String TENANT_ID = AssetGroupSearchRequest.SEARCH_KEY_TENANT_ID;

    private static final String DEFAULT_TENANT_NAME = "WISCONSIN";

    private static final String COMPONENT_SEARCH_KEY = AssetGroupSearchRequest.SEARCH_KEY_COMPONENT_NAME;

    private static final String COMPONENT_NAME_CONTAINS_SEARCH_KEY = AssetGroupSearchRequest.SEARCH_KEY_COMPONENT_NAME_CONTAINS;

    @Autowired
    private GridFsTemplate fsTemplate;

    private Tenant tenant;

    private String componentId;

    @Before
    public void loadTenant() {
        componentId = COMPONENT_PREFIX + (Math.random() + "").replace(".", "0");
        Map<String, Object> tparams = Maps.newHashMap();
        tparams.put("name", DEFAULT_TENANT_NAME);
        tparams.put("type", "STATE");
        tparams.put("tenantSubscriptions", buildSubscriptions());
        tenant = callPOSTRestService("/tenant", tparams, Tenant.class);
    }

    private List<Map<String, Object>> buildSubscriptions() {
        Map<String, Object> componentObj = Maps.newHashMap();
        componentObj.put("componentId", componentId);

        Map<String, Object> subscriber = Maps.newHashMap();
        subscriber.put("component", componentObj);
        subscriber.put("inGoodStanding", true);

        subscriber.put("effectiveDate", "2013-11-23");
        subscriber.put("expirationDate", "2013-11-24");

        List<Map<String, Object>> subs = Lists.newArrayList();
        subs.add(subscriber);
        return subs;
    }

    public Map<String, Object> buildParams() {
        Map<String, Object> params = Maps.newHashMap();
        params.put("component", ImmutableMap.of("id", componentId, "name", "overseer"));
        params.put("tenant", ImmutableMap.of("id", tenant.getId()));
        return params;
    }

    @Test
    public void testSaveAssetGroup() throws InterruptedException {
        AssetGroup savedAssetGroup = callPOSTRestService("/assetGroup", buildParams(), AssetGroup.class);
        assertEquals("asset group should be created", 1, mongoTemplate.findAll(AssetGroup.class).size());
        assertNotNull(savedAssetGroup);
    }

    @Test
    public void saveAssetGroupWithAssetIdFails() throws InterruptedException {
        AssetGroup savedAssetGroup = callPOSTRestService("/assetGroup", buildParams(), AssetGroup.class);
        assertEquals("asset group should be created", 1, mongoTemplate.findAll(AssetGroup.class).size());
        assertNotNull(savedAssetGroup);
        Map<String, Object> assetGroup = buildParams();
        assetGroup.put("id", savedAssetGroup.getId());
        callPOSTWithBadData("/assetGroup", assetGroup);
    }

    @Test
    public void saveAssetGroupFail() throws InterruptedException {
        Map<String, List<String>> errorMessages = callPOSTWithBadData("/assetGroup", null);
        assertEquals("asset group should not be created", 0, mongoTemplate.findAll(AssetGroup.class).size());
        assertApplicationErrorMessageReturned(errorMessages, "unexpected.error");
    }

    @Test
    public void updateAssetGroup() throws InterruptedException {
        Map<String, Object> assetGroup = buildAssetGroupWithTwoAssets();
        AssetGroup savedAssetGroup = callPOSTRestService("/assetGroup", assetGroup, AssetGroup.class);
        assertEquals("asset group should be created", 1, mongoTemplate.findAll(AssetGroup.class).size());
        assertNotNull(savedAssetGroup);
        assetGroup.put("id", savedAssetGroup.getId());
        assetGroup.put(COMPONENT_SEARCH_KEY, "updatedComponentName");
        @SuppressWarnings("unchecked")
        Map<String, Object> asset1 = ((List<Map<String, Object>>) assetGroup.get("assets")).get(0);
        asset1.put("name", "updatedName");
        AssetGroup updatedAssetGroup = callPUTRestService("/assetGroup/" + savedAssetGroup.getId(), assetGroup,
                AssetGroup.class);
        assertEquals("asset group should be created", 1, mongoTemplate.findAll(AssetGroup.class).size());
        assertNotNull(updatedAssetGroup);
        assertNotNull("assetGroup.asset name is updated", updatedAssetGroup.getAssetByName("updatedName"));
    }

    @Test
    public void updateAssetGroupFailures() throws InterruptedException {
        Map<String, Object> assetGroup = buildAssetGroupWithTwoAssets();
        AssetGroup savedAssetGroup = callPOSTRestService("/assetGroup", assetGroup, AssetGroup.class);
        assertEquals("asset group should be created", 1, mongoTemplate.findAll(AssetGroup.class).size());
        assertNotNull(savedAssetGroup);

        Map<String, Object> map = buildParams();

        Map<String, List<String>> errorMessages = callPUTWithBadData("/assetGroup/" + savedAssetGroup.getId(), null);
        assertApplicationErrorMessageReturned(errorMessages, "assetGroup.invalid.id");

        errorMessages = callPUTWithBadData("/assetGroup/" + savedAssetGroup.getId(), map);
        assertApplicationErrorMessageReturned(errorMessages, "assetGroup.invalid.id");

        map.put("id", "invalid-id");
        errorMessages = callPUTWithBadData("/assetGroup/" + savedAssetGroup.getId(), map);
        assertApplicationErrorMessageReturned(errorMessages, "assetGroup.invalid.id");
    }

    @Test
    public void deleteAssetGroup() throws InterruptedException {
        AssetGroup savedAssetGroup = callPOSTRestService("/assetGroup", buildParams(), AssetGroup.class);

        assertEquals("AssetGroup should be created", 1, mongoTemplate.findAll(AssetGroup.class).size());
        assertNotNull(savedAssetGroup);
        try {
            callDeleteRestService("/assetGroup/remove/" + savedAssetGroup.getId());
        }
        catch (Exception e) {
            fail("Cannot delete configuration");
        }

        AssetGroup fetchedAssetGroup = callGETRestService("/assetGroup/" + savedAssetGroup.getId(), AssetGroup.class);
        assertNull("AssetGroup must be null!", fetchedAssetGroup);
    }

    private Map<String, Object> buildAssetGroupWithTwoAssets() {
        Map<String, Object> assetGroup = buildParams();

        List<Map<String, Object>> assetList = new ArrayList<Map<String, Object>>();
        assetList.add(buildAsset());
        assetGroup.put("assets", assetList);
        return assetGroup;
    }

    @Test
    public void getAssetGroupTest() {
        AssetGroup savedAssetGroup = callPOSTRestService("/assetGroup", buildParams(), AssetGroup.class);
        componentId = COMPONENT_PREFIX + (Math.random() + "").replace(".", "0");
        savedAssetGroup = callPOSTRestService("/assetGroup", buildParams(), AssetGroup.class);
        assertNotNull(savedAssetGroup);
        assertEquals("asset group should be created", 2, mongoTemplate.findAll(AssetGroup.class).size());

        savedAssetGroup = callGETRestService("/assetGroup/" + savedAssetGroup.getId(), AssetGroup.class);
        assertNotNull(savedAssetGroup);
    }

    @Test
    public void getSkinnableAssetsTestNoneFound() {
        AssetGroup assetGroup = callGETRestService("/skinnableAssets/foo", AssetGroup.class);
        assertNull(assetGroup);
    }

    @Test
    public void getSkinnableAssetsTest() {
        Map<String, Object> assetGroup = buildAssetGroupWithTwoAssets();
        callPOSTRestService("/assetGroup", assetGroup, AssetGroup.class);

        Map<String, String> params = Maps.newHashMap();
        params.put(TenantType.STATE.name(), DEFAULT_TENANT_NAME);
        AssetGroup assetGroupRet = callGETRestService("/skinnableAssets/" + "overseer", AssetGroup.class, params);
        assertNotNull(assetGroupRet);

        assertEquals("asset group should be retrieved", 1, mongoTemplate.findAll(AssetGroup.class).size());
    }

    @Test
    public void getSkinnableAssetsWithNoGroups() {
        Map<String, String> params = Maps.newHashMap();
        params.put(TenantType.STATE.name(), DEFAULT_TENANT_NAME);
        AssetGroup assetGroupRet = callGETRestService("/skinnableAssets/" + "overseer", AssetGroup.class, params);
        assertNull(assetGroupRet);

        assertEquals("no asset group should be retrieved", 0, mongoTemplate.findAll(AssetGroup.class).size());
    }

    @SuppressWarnings("unchecked")
    @Test
    public void searchAssetGroupTest() {
        Map<String, Object> assetGroupParams1 = buildParams();
        AssetGroup savedAssetGroup = callPOSTRestService("/assetGroup", assetGroupParams1, AssetGroup.class);

        componentId = COMPONENT_PREFIX + (Math.random() + "").replace(".", "0");
        Map<String, Object> assetGroupParams2 = buildParams();
        savedAssetGroup = callPOSTRestService("/assetGroup", assetGroupParams2, AssetGroup.class);
        assertNotNull(savedAssetGroup);
        assertEquals("asset group should be created", 2, mongoTemplate.findAll(AssetGroup.class).size());

        Map<String, String> params = Maps.newHashMap();
        params.put(COMPONENT_SEARCH_KEY, ((Map<String, String>) assetGroupParams1.get("component")).get("name"));
        SearchResponse<AssetGroup> resp = callGETRestService("/assetGroup" + buildQueryString(params),
                SearchResponse.class);
        assertNotNull(resp);
        assertEquals("two should be found", 2, resp.getReturnCount());

        params.clear();
        Map<String, Object> tenantObject = (Map<String, Object>) assetGroupParams2.get("tenant");
        params.put(TENANT_ID, (String) tenantObject.get("id"));
        resp = callGETRestService("/assetGroup" + buildQueryString(params), SearchResponse.class);
        assertNotNull(resp);
        assertEquals("two should be found", 2, resp.getReturnCount());

        params.clear();
        params.put(TENANT_ID, "wrong");
        callGETRestService("/assetGroup" + buildQueryString(params), ResponseError.class, status().isBadRequest());

        params.clear();
        params.put(COMPONENT_SEARCH_KEY, "wrong");
        resp = callGETRestService("/assetGroup" + buildQueryString(params), SearchResponse.class);
        assertEquals("none should be found", 0, resp.getReturnCount());
        assertNotNull(resp);

        params.clear();
        params.put(COMPONENT_NAME_CONTAINS_SEARCH_KEY, "over");
        resp = callGETRestService("/assetGroup" + buildQueryString(params), SearchResponse.class);
        assertEquals("2 should be found", 2, resp.getReturnCount());
        assertNotNull(resp);

        params.clear();
        params.put(COMPONENT_NAME_CONTAINS_SEARCH_KEY, "def");
        resp = callGETRestService("/assetGroup" + buildQueryString(params), SearchResponse.class);
        assertEquals("none should be found", 0, resp.getReturnCount());
        assertNotNull(resp);
    }

    private Map<String, Object> buildAsset() {
        Map<String, Object> params = Maps.newHashMap();
        params.put("name", "prop1");
        params.put("type", AssetType.FILE);
        params.put("assetFileName", "test.txt");
        return params;
    }

}

/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.rest;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.fileUpload;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.shared.progman.domain.Asset;
import org.opentestsystem.shared.progman.domain.AssetPool;
import org.opentestsystem.shared.progman.domain.Tenant;
import org.opentestsystem.shared.progman.domain.search.AssetPoolSearchRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.gridfs.GridFsTemplate;
import org.springframework.mock.web.MockMultipartFile;

import com.google.common.collect.Maps;
import com.mongodb.gridfs.GridFSDBFile;

public class AssetPoolControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String TENANT_ID = AssetPoolSearchRequest.SEARCH_KEY_TENANT_ID;
    private static final String ASSET_POOL_NAME = "name";

    private static final String DEFAULT_TENANT_NAME = "WISCONSIN";

    @Value("classpath:Desert.jpg")
    private byte[] testFile;

    @Autowired
    private GridFsTemplate fsTemplate;

    private Tenant tenant;

    @Before
    public void loadTenant() {
        Map<String, Object> tparams = Maps.newHashMap();
        tparams.put("name", DEFAULT_TENANT_NAME);
        tparams.put("type", "STATE");
        tenant = callPOSTRestService("/tenant", tparams, Tenant.class);
    }

    public Map<String, Object> buildParams() {
        Map<String, Object> params = Maps.newHashMap();
        params.put(TENANT_ID, tenant.getId());
        params.put(ASSET_POOL_NAME, "testpool");
        return params;
    }

    @Test
    public void saveAssetPool() throws InterruptedException {
        AssetPool savedAssetPool = callPOSTRestService("/assetPool", buildParams(), AssetPool.class);
        assertEquals("asset pool should be created", 1, mongoTemplate.findAll(AssetPool.class).size());
        assertNotNull(savedAssetPool);
    }

    @Test
    public void saveAssetPoolWithAssetPoolIdFails() throws InterruptedException {
        AssetPool savedAssetPool = callPOSTRestService("/assetPool", buildParams(), AssetPool.class);
        assertEquals("asset pool should be created", 1, mongoTemplate.findAll(AssetPool.class).size());
        assertNotNull(savedAssetPool);

        Map<String, Object> assetPool = buildParams();
        assetPool.put("id", savedAssetPool.getId());
        Map<String, List<String>> errorMessages = callPOSTWithBadData("/assetPool", assetPool);
        assertApplicationErrorMessageReturned(errorMessages, "assetPool.exists");
    }

    @Test
    public void saveAssetPoolFail() throws InterruptedException {
        Map<String, List<String>> errorMessages = callPOSTWithBadData("/assetPool", null);
        assertEquals("asset pool should not be created", 0, mongoTemplate.findAll(AssetPool.class).size());
        assertApplicationErrorMessageReturned(errorMessages, "unexpected.error");
    }

    @Test
    public void getAssetPool() throws InterruptedException {
        AssetPool savedAssetPool = callPOSTRestService("/assetPool", buildParams(), AssetPool.class);
        assertEquals("asset pool should be created", 1, mongoTemplate.findAll(AssetPool.class).size());
        assertNotNull(savedAssetPool);
        AssetPool foundAssetPool = callGETRestService("/assetPool/" + savedAssetPool.getId(), AssetPool.class);
        assertNotNull(foundAssetPool);
    }

    @Test
    public void getAssetPoolByTenantId() throws InterruptedException {
        AssetPool savedAssetPool = callPOSTRestService("/assetPool", buildParams(), AssetPool.class);
        assertEquals("asset pool should be created", 1, mongoTemplate.findAll(AssetPool.class).size());
        assertNotNull(savedAssetPool);
        AssetPool foundAssetPool = callGETRestService("/assetPool/tenant/" + savedAssetPool.getTenantId(), AssetPool.class);
        assertEquals("asset pool tenant id's are different", savedAssetPool.getTenantId(), foundAssetPool.getTenantId());
        assertNotNull(foundAssetPool);
    }

    @Test
    public void updateAssetPool() throws InterruptedException {
        Map<String, Object> map = buildParams();
        Asset asset = new Asset();
        asset.setAssetFileGridId("12345");
        asset.setAssetFileName("test.jpg");
        map.put("assets", Arrays.asList(asset));
        AssetPool savedAssetPool = callPOSTRestService("/assetPool", map, AssetPool.class);
        assertEquals("asset pool should be created", 1, mongoTemplate.findAll(AssetPool.class).size());
        assertNotNull(savedAssetPool);
        asset.setAssetFileName("updatetest.jpg");
        map.put("id", savedAssetPool.getId());
        AssetPool updatedAssetPool = callPUTRestService("/assetPool/" + savedAssetPool.getId(), map, AssetPool.class);
        assertEquals("asset pool should be updated", 1, mongoTemplate.findAll(AssetPool.class).size());
        assertNotNull(updatedAssetPool);
        Asset updatedAsset = updatedAssetPool.getAssets().get(0);
        assertEquals("Updated file name", updatedAsset.getAssetFileName(), "updatetest.jpg");
    }

    @Test
    public void updateAssetPoolFailures() throws InterruptedException {
        Map<String, Object> map = buildParams();
        Asset asset = new Asset();
        asset.setAssetFileGridId("12345");
        asset.setAssetFileName("test.jpg");
        map.put("assets", Arrays.asList(asset));
        AssetPool savedAssetPool = callPOSTRestService("/assetPool", map, AssetPool.class);
        assertEquals("asset pool should be created", 1, mongoTemplate.findAll(AssetPool.class).size());
        assertNotNull(savedAssetPool);

        Map<String, List<String>> errorMessages = callPUTWithBadData("/assetPool/" + savedAssetPool.getId(), null);
        assertApplicationErrorMessageReturned(errorMessages, "assetPool.invalid.id");

        asset.setAssetFileName("updatetest.jpg");
        errorMessages = callPUTWithBadData("/assetPool/" + savedAssetPool.getId(), map);
        assertApplicationErrorMessageReturned(errorMessages, "assetPool.invalid.id");

        map.put("id", "invalid-id");
        errorMessages = callPUTWithBadData("/assetPool/" + savedAssetPool.getId(), map);
        assertApplicationErrorMessageReturned(errorMessages, "assetPool.invalid.id");
    }

    @Test
    public void uploadFileToAssetPool() throws Exception {
        AssetPool savedAssetPool = callPOSTRestService("/assetPool", buildParams(), AssetPool.class);
        assertEquals("asset pool should be created", 1, mongoTemplate.findAll(AssetPool.class).size());
        assertNotNull(savedAssetPool);

        MockMultipartFile mmpf = new MockMultipartFile("assetFile", "Desert.jpg", "image/jpeg", testFile);
        mockMvc.perform(fileUpload("/assetPool/" + savedAssetPool.getId() + "/assetFile").file(mmpf)).andExpect(status().isCreated());
        List<GridFSDBFile> retFiles = fsTemplate.find(new Query());
        assertEquals("file was found in grid", 1, retFiles.size());

        AssetPool foundAssetPool = callGETRestService("/assetPool/" + savedAssetPool.getId(), AssetPool.class);
        assertNotNull(foundAssetPool);
        Asset asset = foundAssetPool.getAssets().get(0);
        assertEquals("File names are different", asset.getAssetFileName(), mmpf.getOriginalFilename());

    }

    @Test
    public void uploadAssetFileToAssetPoolFailure() throws Exception {
        AssetPool savedAssetPool = callPOSTRestService("/assetPool", buildParams(), AssetPool.class);
        assertEquals("asset pool should be created", 1, mongoTemplate.findAll(AssetPool.class).size());
        assertNotNull(savedAssetPool);

        MockMultipartFile mmpf = new MockMultipartFile("assetFile", "Desert.invalid_extension", "image/invalid", testFile);
        mockMvc.perform(fileUpload("/assetPool/" + savedAssetPool.getId() + "/assetFile").file(mmpf)).andExpect(status().isCreated());
        List<GridFSDBFile> retFiles = fsTemplate.find(new Query());
        assertEquals("file was not found in grid", 0, retFiles.size());

        AssetPool foundAssetPool = callGETRestService("/assetPool/" + savedAssetPool.getId(), AssetPool.class);
        assertNotNull(foundAssetPool);
        assertThat(foundAssetPool.getAssets(), is(nullValue()));
    }

    @Test
    public void deleteFile() throws Exception {
        AssetPool savedAssetPool = callPOSTRestService("/assetPool", buildParams(), AssetPool.class);
        assertEquals("asset pool should be created", 1, mongoTemplate.findAll(AssetPool.class).size());
        assertNotNull(savedAssetPool);

        MockMultipartFile mmpf = new MockMultipartFile("assetFile", "Desert.jpg", "image/jpeg", testFile);
        mockMvc.perform(fileUpload("/assetPool/" + savedAssetPool.getId() + "/assetFile").file(mmpf)).andExpect(status().isCreated());
        List<GridFSDBFile> retFiles = fsTemplate.find(new Query());
        assertEquals("file was found in grid", 1, retFiles.size());

        AssetPool foundAssetPool = callGETRestService("/assetPool/" + savedAssetPool.getId(), AssetPool.class);
        assertNotNull(foundAssetPool);
        Asset asset = foundAssetPool.getAssets().get(0);
        assertEquals("File names are different", asset.getAssetFileName(), mmpf.getOriginalFilename());

        callDeleteRestService("/assetPool/" + savedAssetPool.getId() + "/assetFile/" + retFiles.get(0).getId());
        List<GridFSDBFile> delFiles = fsTemplate.find(new Query());
        assertEquals("file was found in grid", 0, delFiles.size());

    }

}

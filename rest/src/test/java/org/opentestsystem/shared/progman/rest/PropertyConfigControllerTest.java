/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.rest;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.shared.progman.domain.PropertyConfig;
import org.opentestsystem.shared.progman.domain.PropertyConfigAudit;
import org.opentestsystem.shared.progman.domain.PropertyEntry;
import org.opentestsystem.shared.search.domain.SearchResponse;

import com.google.common.collect.Maps;

/**
 * Test class for PropertyConfigController.
 */
public class PropertyConfigControllerTest extends AbstractRestEmbeddedMongoTest {

    private Map<String, Object> propConfig1;
    private Map<String, Object> propConfig2;
    private Map<String, Object> propConfig3;

    @Before
    public void buildParams() {
        propConfig1 = Maps.newHashMap();
        propConfig1.put("envName", "DEV");
        propConfig1.put("name", "tib_config");

        List<PropertyEntry> properties = new ArrayList<PropertyEntry>();
        properties.add(new PropertyEntry("foo.bar.prop", "true"));
        properties.add(new PropertyEntry("foo.bob.prop", "yippe"));
        properties.add(new PropertyEntry("tib.stfp.site", "sftp.mydomain.com"));
        properties.add(new PropertyEntry("tib.stfp.port", "9999"));
        propConfig1.put("properties", properties);

        propConfig2 = Maps.newHashMap();
        propConfig2.put("envName", "local");
        propConfig2.put("name", "mna_config");

        List<PropertyEntry> properties2 = new ArrayList<PropertyEntry>();
        properties2.add(new PropertyEntry("prop2", "yo"));
        properties2.add(new PropertyEntry("prop2.1", "dude"));
        properties2.add(new PropertyEntry("mna.mongo.url", "a.b.c"));
        propConfig2.put("properties", properties2);

        propConfig3 = Maps.newHashMap();
        propConfig3.put("envName", "local");
        propConfig3.put("name", "overlay_mna_config");

        List<PropertyEntry> properties3 = new ArrayList<PropertyEntry>();
        properties3.add(new PropertyEntry("prop2", "yippee"));
        properties3.add(new PropertyEntry("new.custom.prop", "fizz"));
        propConfig3.put("properties", properties3);

    }

    @Test
    public void saveConfiguration() throws InterruptedException {
        PropertyConfig savedConfig = callPOSTRestService("/propertyConfig", propConfig1, PropertyConfig.class);
        assertEquals("Configuration should be created", 1, mongoTemplate.findAll(PropertyConfig.class).size());
        assertNotNull(savedConfig);

        @SuppressWarnings("unchecked")
        SearchResponse<PropertyConfigAudit> fetchedAudits = callGETRestService("/propertyConfig/" + savedConfig.getId() + "/audits", SearchResponse.class);

        assertNotNull(fetchedAudits);
        assertEquals(1, fetchedAudits.getSearchResults().size());

    }

    @Test
    public void updateConfiguration() throws InterruptedException {
        PropertyConfig savedConfig = callPOSTRestService("/propertyConfig", propConfig1, PropertyConfig.class);
        assertNotNull(savedConfig);

        propConfig1.put("id", savedConfig.getId());
        propConfig1.put("name", "config name");
        PropertyConfig updatedConfig = callPUTRestService("/propertyConfig/" + savedConfig.getId(), propConfig1, PropertyConfig.class);
        assertNotNull(updatedConfig);
        assertEquals("Config should be updated", updatedConfig.getName(), "config name");
    }

    @Test
    public void findConfiguration() throws InterruptedException {
        PropertyConfig savedConfig = callPOSTRestService("/propertyConfig", propConfig1, PropertyConfig.class);
        // insert a second prop config
        callPOSTRestService("/propertyConfig", propConfig2, PropertyConfig.class);
        assertEquals("Configurations should be created", 2, mongoTemplate.findAll(PropertyConfig.class).size());
        assertNotNull(savedConfig);
        PropertyConfig fetchedConfig = callGETRestService("/propertyConfig/" + savedConfig.getId(), PropertyConfig.class);
        assertNotNull("Config was null!", fetchedConfig);
    }

    @Test
    public void removeConfiguration() throws InterruptedException {
        PropertyConfig savedConfig = callPOSTRestService("/propertyConfig", propConfig1, PropertyConfig.class);

        assertEquals("Configuration should be created", 1, mongoTemplate.findAll(PropertyConfig.class).size());
        assertNotNull(savedConfig);
        try {
            callDeleteRestService("/propertyConfig/" + savedConfig.getId());
        } catch (Exception e) {
            fail("Cannot delete configuration");
        }

        @SuppressWarnings("unchecked")
        SearchResponse<PropertyConfigAudit> fetchedAudits = callGETRestService("/propertyConfig/" + savedConfig.getId() + "/audits", SearchResponse.class);

        assertNotNull(fetchedAudits);
        assertEquals(2, fetchedAudits.getSearchResults().size());
    }

    @Test
    public void searchConfiguration() throws InterruptedException {
        PropertyConfig savedConfig = callPOSTRestService("/propertyConfig", propConfig1, PropertyConfig.class);
        assertNotNull(savedConfig);
        // insert a second prop config
        callPOSTRestService("/propertyConfig", propConfig2, PropertyConfig.class);
        assertEquals("Configurations should be created", 2, mongoTemplate.findAll(PropertyConfig.class).size());

        // search by name exact
        Map<String, String> searchParams = Maps.newHashMap();
        searchParams.put("name", "tib_config");
        @SuppressWarnings("unchecked")
        SearchResponse<PropertyConfig> response = callGETRestService("/propertyConfig" + buildQueryString(searchParams), SearchResponse.class);
        assertEquals("Property Configuration not found", 1, response.getSearchResults().size());

        // test search equals by environmentName
        searchParams = Maps.newHashMap();
        searchParams.put("envName", "DEV");
        @SuppressWarnings("unchecked")
        SearchResponse<PropertyConfig> response2 = callGETRestService("/propertyConfig" + buildQueryString(searchParams), SearchResponse.class);
        assertEquals("Property Configuration not found", 1, response2.getSearchResults().size());

        // test contains search by name
        searchParams = Maps.newHashMap();
        searchParams.put("nameContains", "ib_co");
        @SuppressWarnings("unchecked")
        SearchResponse<PropertyConfig> containsResponse = callGETRestService("/propertyConfig" + buildQueryString(searchParams), SearchResponse.class);

        assertEquals("Property Configuration not found", 1, containsResponse.getSearchResults().size());

        // test contains search by environmentName
        searchParams = Maps.newHashMap();
        searchParams.put("envNameContains", "oca");
        @SuppressWarnings("unchecked")
        SearchResponse<PropertyConfig> response3 = callGETRestService("/propertyConfig" + buildQueryString(searchParams), SearchResponse.class);
        assertEquals("Property Configuration not found", 1, response3.getSearchResults().size());

        // test contains search miss
        searchParams = Maps.newHashMap();
        searchParams.put("nameContains", "GOO");
        @SuppressWarnings("unchecked")
        SearchResponse<PropertyConfig> miss = callGETRestService("/propertyConfig" + buildQueryString(searchParams), SearchResponse.class);
        assertEquals("Property Configuration shouldn't have been found", 0, miss.getSearchResults().size());

        // test contains search miss
        searchParams = Maps.newHashMap();
        searchParams.put("envNameContains", "GOO");
        @SuppressWarnings("unchecked")
        SearchResponse<PropertyConfig> miss2 = callGETRestService("/propertyConfig" + buildQueryString(searchParams), SearchResponse.class);
        assertEquals("Property Configuration shouldn't have been found", 0, miss2.getSearchResults().size());
    }

    @Test
    public void findConfigurationByNameAndEnvName() throws InterruptedException {
        PropertyConfig savedConfig = callPOSTRestService("/propertyConfig", propConfig1, PropertyConfig.class);
        assertEquals("Configuration should be created", 1, mongoTemplate.findAll(PropertyConfig.class).size());
        assertNotNull(savedConfig);
        // insert a second prop config
        callPOSTRestService("/propertyConfig", propConfig2, PropertyConfig.class);
        assertEquals("Configurations should be created", 2, mongoTemplate.findAll(PropertyConfig.class).size());

        PropertyConfig fetchedConfig = callGETRestService("/propertyConfig/name/tib_config/envName/DEV", PropertyConfig.class);
        assertNotNull("Config was null!", fetchedConfig);

        fetchedConfig = callGETRestService("/propertyConfig/name/ib_con/envName/DEV", PropertyConfig.class);
        assertNull("Config was null!", fetchedConfig);
    }

    @Test
    public void findConfigurationWithOverlay() throws InterruptedException {
        callPOSTRestService("/propertyConfig", propConfig2, PropertyConfig.class);
        callPOSTRestService("/propertyConfig", propConfig3, PropertyConfig.class);

        assertEquals("Configuration should be created", 2, mongoTemplate.findAll(PropertyConfig.class).size());

        PropertyConfig overlayed = callGETRestService("/propertyConfig/name/mna_config/envName/local?overlay=overlay_mna_config", PropertyConfig.class);

        assertNotNull("Config was null!", overlayed);

        assertEquals("wrong propery value", "fizz", findProperty(overlayed, "new.custom.prop"));
        assertEquals("wrong propery value", "yippee", findProperty(overlayed, "prop2"));
        assertEquals("wrong propery value", "a.b.c", findProperty(overlayed, "mna.mongo.url"));
        assertEquals("wrong propery value", "dude", findProperty(overlayed, "prop2.1"));

    }

    private String findProperty(final PropertyConfig config, final String key) {
        String val = null;
        for (PropertyEntry entry : config.getProperties()) {
            if (key.equals(entry.getPropertyKey())) {
                val = entry.getPropertyValue();
                break;
            }
        }
        return val;
    }

}

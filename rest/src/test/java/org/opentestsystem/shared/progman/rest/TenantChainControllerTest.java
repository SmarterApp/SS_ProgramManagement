/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.rest;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.junit.Assert.assertThat;

import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.shared.progman.domain.Tenant;
import org.opentestsystem.shared.progman.domain.TenantChain;
import org.opentestsystem.shared.progman.domain.TenantType;
import org.opentestsystem.shared.progman.service.TenantService;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Maps;

public class TenantChainControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String SBAL = "Smarter Balanced";
    private static final String MUV = "Middle Upper Valley";
    private static final String FOOEL = "Foo Elementary";

    @Autowired
    private TenantService tenantService;

    private Tenant consortiumTenant;
    private Tenant caTenant;
    private Tenant waTenant;
    private Tenant hiTenant;
    private Tenant middleUpperValleyTenant;
    private Tenant fooElemTenant;

    @Before
    public void init() {
        consortiumTenant = new Tenant();
        consortiumTenant.setName(SBAL);
        consortiumTenant.setType(TenantType.STATE_GROUP);

        caTenant = new Tenant();
        caTenant.setName("CA");
        caTenant.setType(TenantType.STATE);

        waTenant = new Tenant();
        waTenant.setName("WA");
        waTenant.setType(TenantType.STATE);

        hiTenant = new Tenant();
        hiTenant.setName("HI");
        hiTenant.setType(TenantType.STATE);

        middleUpperValleyTenant = new Tenant();
        middleUpperValleyTenant.setName(MUV);
        middleUpperValleyTenant.setType(TenantType.DISTRICT);

        fooElemTenant = new Tenant();
        fooElemTenant.setName(FOOEL);
        fooElemTenant.setType(TenantType.INSTITUTION);
    }

    @Test
    public void testSingleConsortiumChain() {
        consortiumTenant = tenantService.saveTenant(consortiumTenant);
        String tenantId = consortiumTenant.getId();
        assertThat(tenantId, notNullValue());
        Map<String, String> params = Maps.newHashMap();
        params.put(TenantType.STATE_GROUP.name(), SBAL);
        TenantChain chain = callGETRestService("/tenantchain/", TenantChain.class, params);
        assertThat(chain, notNullValue());

        Set<Tenant> tenants = chain.getTenants();
        assertThat(tenants, notNullValue());
        assertThat(tenants.size(), is(1));

        Iterator<Tenant> itr = tenants.iterator();
        Tenant tenant = itr.next();

        assertThat(tenant.getId(), is(tenantId));
        assertThat(tenant.getName(), is(SBAL));

    }

    @Test
    public void testCaTenantConsortiumDeploy() {
        caTenant = tenantService.saveTenant(caTenant);
        waTenant = tenantService.saveTenant(waTenant);
        hiTenant = tenantService.saveTenant(hiTenant);

        Map<String, String> params = Maps.newHashMap();
        params.put(TenantType.STATE_GROUP.name(), SBAL);
        params.put(TenantType.STATE.name(), "CA");
        params.put(TenantType.DISTRICT.name(), MUV);
        params.put(TenantType.INSTITUTION.name(), FOOEL);
        TenantChain chain = callGETRestService("/tenantchain/", TenantChain.class, params);
        //        TenantChain chain = tenantChainService.findTenantChain(SBAL, , null, MUV, FOOEL);
        assertThat(chain, notNullValue());

        Set<Tenant> tenants = chain.getTenants();
        assertThat(tenants, notNullValue());
        assertThat(tenants.size(), is(1));

        Iterator<Tenant> itr = tenants.iterator();
        Tenant tenant = itr.next();

        assertThat(tenant.getName(), is("CA"));
    }

    @Test
    public void testAllTenantsConsortiumDeploy() {
        caTenant = tenantService.saveTenant(caTenant);
        waTenant = tenantService.saveTenant(waTenant);
        hiTenant = tenantService.saveTenant(hiTenant);
        consortiumTenant = tenantService.saveTenant(consortiumTenant);
        middleUpperValleyTenant = tenantService.saveTenant(middleUpperValleyTenant);
        fooElemTenant = tenantService.saveTenant(fooElemTenant);


        Map<String, String> params = Maps.newHashMap();
        params.put(TenantType.STATE_GROUP.name(), SBAL);
        params.put(TenantType.STATE.name(), "CA");
        params.put(TenantType.DISTRICT.name(), MUV);
        params.put(TenantType.INSTITUTION.name(), FOOEL);
        TenantChain chain = callGETRestService("/tenantchain/", TenantChain.class, params);
        assertThat(chain, notNullValue());

        Set<Tenant> tenants = chain.getTenants();
        assertThat(tenants, notNullValue());
        assertThat(tenants.size(), is(4));

        Iterator<Tenant> itr = tenants.iterator();
        Tenant tenant1 = itr.next();
        Tenant tenant2 = itr.next();
        Tenant tenant3 = itr.next();
        Tenant tenant4 = itr.next();

        assertThat(tenant1.getName(), is(FOOEL));
        assertThat(tenant2.getName(), is(MUV));
        assertThat(tenant3.getName(), is("CA"));
        assertThat(tenant4.getName(), is(SBAL));
    }

    @Test
    public void testDistrictDeploy() {
        caTenant = tenantService.saveTenant(caTenant);
        waTenant = tenantService.saveTenant(waTenant);
        hiTenant = tenantService.saveTenant(hiTenant);
        consortiumTenant = tenantService.saveTenant(consortiumTenant);
        middleUpperValleyTenant = tenantService.saveTenant(middleUpperValleyTenant);
        fooElemTenant = tenantService.saveTenant(fooElemTenant);
        Map<String, String> params = Maps.newHashMap();
        params.put(TenantType.DISTRICT.name(), MUV);
        params.put(TenantType.INSTITUTION.name(), FOOEL);
        TenantChain chain = callGETRestService("/tenantchain/", TenantChain.class, params);

        assertThat(chain, notNullValue());

        Set<Tenant> tenants = chain.getTenants();
        assertThat(tenants, notNullValue());
        assertThat(tenants.size(), is(2));

        Iterator<Tenant> itr = tenants.iterator();
        Tenant tenant1 = itr.next();
        Tenant tenant2 = itr.next();

        assertThat(tenant1.getName(), is(FOOEL));
        assertThat(tenant2.getName(), is(MUV));
    }

}

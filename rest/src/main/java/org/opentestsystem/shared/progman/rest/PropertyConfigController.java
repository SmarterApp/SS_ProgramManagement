/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.rest;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.progman.domain.PropertyConfig;
import org.opentestsystem.shared.progman.domain.search.PropertyConfigSearchRequest;
import org.opentestsystem.shared.progman.service.PropertyConfigService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

/**
 * Rest Controller for CRUD operations on PropertyConfiguration.
 */
@Controller
public class PropertyConfigController extends AbstractRestController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PropertyConfigController.class);

    @Autowired
    private PropertyConfigService propertyConfigService;

    /**
     * Gets Configuration by propertyConfig Id.
     * 
     * @param configId propertyConfig id.
     * @return PropertyConfig configuration object.
     */
    @RequestMapping(value = "/propertyConfig/{configId}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Progman Read" })
    @ResponseBody
    public PropertyConfig findConfigurationById(@PathVariable final String configId) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Finding configuration for Id: " + configId);
        }

        return propertyConfigService.getPropertyConfig(configId);
    }

    /**
     * Gets Configuration by name and envName
     * 
     * @param name Component name
     * @param envName Environment name
     * @return PropertyConfig configuration object.
     */
    @RequestMapping(value = "/propertyConfig/name/{name}/envName/{envName}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Progman Read" })
    @ResponseBody
    public PropertyConfig findConfiguration(@PathVariable final String name, @PathVariable final String envName, @RequestParam(value = "overlay", required = false) final String overlay) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Finding configuration for name and envName: " + name + ", " + envName);
        }
        return propertyConfigService.getEffectiveProperties(name, envName, overlay);
    }

    /**
     * Creates Configuration.
     * 
     * @param propertyConfig propertyConfig to be saved.
     * @param response HttpServletResponse.
     * @return PropertyConfig newly created propertyConfig object.
     */
    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/propertyConfig", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Progman Admin" })
    @ResponseBody
    public PropertyConfig saveConfiguration(@RequestBody @Valid final PropertyConfig propertyConfig, final HttpServletResponse response) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Saving Configuration");
        }

        PropertyConfig savedPropertyConfig = propertyConfigService.savePropertyConfig(propertyConfig);
        response.setHeader("Location", savedPropertyConfig.getUrl());
        return savedPropertyConfig;
    }

    /**
     * Creates Configuration.
     * 
     * @param propertyConfig propertyConfig to be saved.
     * @param response HttpServletResponse.
     * @return PropertyConfig newly created propertyConfig object.
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/propertyConfig/{configId}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Progman Admin" })
    @ResponseBody
    public PropertyConfig updateConfiguration(@PathVariable final String configId, @RequestBody @Valid final PropertyConfig propertyConfig, final HttpServletResponse response) {
        LOGGER.debug("updating Configuration");
        PropertyConfig savedPropertyConfig = propertyConfigService.savePropertyConfig(propertyConfig);
        response.setHeader("Location", savedPropertyConfig.getUrl());
        return savedPropertyConfig;
    }

    /**
     * Removes Configuration.
     * 
     * @param configId propertyConfig Id.
     */
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @RequestMapping(value = "/propertyConfig/{configId}", method = RequestMethod.DELETE)
    @Secured({ "ROLE_Progman Admin" })
    public void removeConfigurationById(@PathVariable final String configId) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Removing configuration with Id:" + configId);
        }
        propertyConfigService.removePropertyConfig(configId);
    }

    /**
     * Can query the /propertyConfig endpoint with query parameters in a querystring.
     * or with JSON Valid parameters are: component.name,
     * tenant.name, envName, component.asset.name, tenant.asset.name
     * 
     * @param request HttpServletRequest
     * @param response HttpServletResponse
     * @return SearchResponse<PropertyConfig>
     */
    @RequestMapping(value = "/propertyConfig", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Progman Read" })
    @ResponseBody
    public SearchResponse<PropertyConfig> searchConfigurations(final HttpServletRequest request, final HttpServletResponse response) {

        PropertyConfigSearchRequest searchRequest = new PropertyConfigSearchRequest(request.getParameterMap());
        SearchResponse<PropertyConfig> searchResponse;
        if (searchRequest.isValid()) {
            searchResponse = propertyConfigService.searchPropertyConfigs(searchRequest);
        } else {
            throw new RestException("propertyConfig.search.invalidSearchCriteria");
        }
        return searchResponse;
    }

}

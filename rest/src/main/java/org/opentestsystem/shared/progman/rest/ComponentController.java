/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.rest;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.progman.domain.Component;
import org.opentestsystem.shared.progman.domain.search.ComponentSearchRequest;
import org.opentestsystem.shared.progman.service.ComponentService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

@Controller
public class ComponentController extends AbstractRestController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ComponentController.class);

    @Autowired
    private ComponentService componentService;

    /**
     * Gets component by componentId.
     * @param component id.
     * @return Component object.
     */
    @RequestMapping(value = "/component/{componentId}", method = RequestMethod.GET, produces = {MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Progman Read" })
    @ResponseBody
    public Component findComponentById(@PathVariable final String componentId) {
        LOGGER.debug("Finding component for Id: " + componentId);
        return componentService.getComponent(componentId);
    }

    /**
     * Gets component by name
     * @param component name
     * @return Component object.
     */
    @RequestMapping(value = "/component/name/{name}", method = RequestMethod.GET, produces = {MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Progman Read" })
    @ResponseBody
    public Component findComponent(@PathVariable final String name) {
        LOGGER.debug("Finding component by name: " + name);
        return componentService.getComponentByName(name);
    }

    /**
     * Creates Component.
     * @param component to be saved.
     * @param response HttpServletResponse.
     * @return Component newly created component object.
     */
    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/component", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = {MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Progman Admin" })
    @ResponseBody
    public Component saveComponent(@RequestBody @Valid final Component component, final HttpServletResponse response) {
        LOGGER.debug("Saving Component");
        return componentService.saveComponent(component);
    }

    /**
     * Updates Component.
     * @param component to be saved.
     * @param response HttpServletResponse.
     * @return Component updated component object.
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/component/{componentId}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = {MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Progman Admin" })
    @ResponseBody
    public Component updateComponent(@PathVariable final String componentId, @RequestBody @Valid final Component component, final HttpServletResponse response) {
        if (component == null || StringUtils.isEmpty(component.getId()) || !componentId.equals(component.getId())) {
            throw new LocalizedException("component.invalid.id");
        } else {
            return componentService.saveComponent(component);
        }
    }

    /**
     * Removes Component.
     * @param componentId component Id.
     */
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @RequestMapping(value = "/component/{componentId}", method = RequestMethod.DELETE)
    @Secured({ "ROLE_Progman Admin" })
    public void removeComponentById(@PathVariable final String componentId) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Removing component with Id:" + componentId);
        }
        componentService.removeComponent(componentId);
    }

    /**
     * Can query the /component endpoint with query parameters in a querystring.
     * or with JSON Valid parameters are: state, district
     * @param request HttpServletRequest
     * @param response HttpServletResponse
     * @return SearchResponse<Component>
     */
    @RequestMapping(value = "/component", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Progman Read" })
    @ResponseBody
    public SearchResponse<Component> searchComponent(final HttpServletRequest request, final HttpServletResponse response) {

        ComponentSearchRequest searchRequest = new ComponentSearchRequest(request.getParameterMap());
        SearchResponse<Component> searchResponse;
        if (searchRequest.isValid()) {
            searchResponse = componentService.searchComponents(searchRequest);
        } else {
            throw new RestException("component.search.invalidSearchCriteria");
        }
        return searchResponse;
    }
}

/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.rest;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.progman.domain.PropertyConfigAudit;
import org.opentestsystem.shared.progman.domain.search.PropertyConfigAuditSearchRequest;
import org.opentestsystem.shared.progman.service.PropertyConfigAuditService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.google.common.collect.Maps;

/**
 * Rest Controller for CRUD operations on PropertyConfigAudit.
 */
@Controller
public class PropertyConfigAuditController extends AbstractRestController {

    @Autowired
    private PropertyConfigAuditService propertyConfigAuditService;

    /**
     * Creates Configuration.
     * 
     * @param propertyConfig propertyConfig to be saved.
     * @param response HttpServletResponse.
     * @return PropertyConfig newly created propertyConfig object.
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/propertyConfig/{configId}/audits", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Progman Read" })
    @ResponseBody
    public SearchResponse<PropertyConfigAudit> getConfigurationAuditsByConfigId(@PathVariable final String configId, final HttpServletRequest request) {

        Map<String, String[]> requestParams = request.getParameterMap();

        HashMap<String, String[]> searchParams = Maps.newHashMap();
        searchParams.putAll(requestParams);
        searchParams.put(PropertyConfigAuditSearchRequest.SEARCH_FILTER_AUDITED_ID, new String[] { configId });

        PropertyConfigAuditSearchRequest searchRequest = new PropertyConfigAuditSearchRequest(searchParams);

        SearchResponse<PropertyConfigAudit> searchResponse;
        if (searchRequest.isValid()) {
            searchResponse = propertyConfigAuditService.getPropertyConfigAudits(searchRequest);
        } else {
            throw new RestException("propertyConfig.search.invalidSearchCriteria");
        }
        return searchResponse;
    }
}

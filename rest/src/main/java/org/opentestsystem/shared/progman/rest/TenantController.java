/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.rest;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.progman.domain.Tenant;
import org.opentestsystem.shared.progman.domain.TenantType;
import org.opentestsystem.shared.progman.domain.search.TenantSearchRequest;
import org.opentestsystem.shared.progman.service.TenantService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

/**
 * Rest Controller for CRUD operations on Tenant.
 */
@Controller
public class TenantController extends AbstractRestController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TenantController.class);

    @Autowired
    private TenantService tenantService;

    /**
     * Gets tenant by tenantId.
     * 
     * @param tenant id.
     * @return Tenant object.
     */
    @RequestMapping(value = "/tenant/{tenantId}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Progman Read" })
    @ResponseBody
    public Tenant findTenantById(@PathVariable final String tenantId) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Finding tenant for Id: " + tenantId);
        }

        return this.tenantService.getTenant(tenantId);
    }

    /**
     * Gets All tenants.
     * 
     * @return List of Tenant objects.
     */
    @RequestMapping(value = "/tenants", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Progman Read" })
    @ResponseBody
    public List<Tenant> findTenants() {
        return this.tenantService.getTenants();
    }

    /**
     * Finds tenants by componentName which are in good standing.
     * Valid query parameters are:
     * <ul>
     * <li>inGoodStanding - true or false if you want to filter components by inGoodStanding</li>
     * <li>page.page - page you want to retrieve (1-indexed)</li>
     * <li>page.size - size of the page you want to retrieve</li>
     * <li>page.sort - property that should be sorted by</li>
     * <li>page.sort.dir - direction that should be used for sorting</li>
     * </ul>
     * 
     * @param componentName
     * @param inGoodStanding
     * @param searchVal
     * @param tenantType
     * @param pageable
     * @return List of Tenant objects.
     */
    @RequestMapping(value = "/tenant/component/name/{componentName}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Progman Read" })
    @ResponseBody
    public List<Tenant> findByComponentAndSearchVal(
            @PathVariable final String componentName,
            @RequestParam(value = "inGoodStanding", required = false) final Boolean inGoodStanding,
            @RequestParam(value = "searchVal", required = false) final String searchVal,
            @RequestParam(value = "tenantType", required = false) final TenantType tenantType,
            final HttpServletRequest request,
            final Pageable pageable) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Finding tenants by component: " + componentName);
        }
        return this.tenantService.findByComponentAndSearchVal(componentName, inGoodStanding, searchVal, tenantType, pageable);
    }

    /**
     * Creates Tenant.
     * 
     * @param tenant to be saved.
     * @param response HttpServletResponse.
     * @return Tenant newly created tenant object.
     */
    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/tenant", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Progman Admin" })
    @ResponseBody
    public Tenant saveTenant(@RequestBody @Valid final Tenant tenant, final HttpServletResponse response) {

        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Saving Tenant");
        }

        final Tenant savedTenant = this.tenantService.saveTenant(tenant);
        response.setHeader("Location", savedTenant.getUrl());
        return savedTenant;
    }

    /**
     * Updates Tenant.
     * 
     * @param tenant to be saved.
     * @param response HttpServletResponse.
     * @return Tenant updated tenant object.
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/tenant/{tenantId}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Progman Admin" })
    @ResponseBody
    public Tenant updateTenant(@PathVariable final String tenantId, @RequestBody @Valid final Tenant tenant, final HttpServletResponse response) {
        if (tenant == null || StringUtils.isEmpty(tenant.getId()) || !tenantId.equals(tenant.getId())) {
            throw new LocalizedException("tenant.invalid.id");
        } else {
            final Tenant savedTenant = this.tenantService.saveTenant(tenant);
            response.setHeader("Location", savedTenant.getUrl());
            return savedTenant;
        }
    }

    /**
     * Removes Tenant.
     * 
     * @param tenantId tenant Id.
     */
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @RequestMapping(value = "/tenant/{tenantId}", method = RequestMethod.DELETE)
    @Secured({ "ROLE_Progman Admin" })
    public void removeTenantById(@PathVariable final String tenantId) {

        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Removing tenant with Id:" + tenantId);
        }

        this.tenantService.removeTenant(tenantId);
    }

    /**
     * Can query the /tenant endpoint with query parameters in a querystring.
     * or with JSON Valid parameters are: state, district
     * 
     * @param request HttpServletRequest
     * @param response HttpServletResponse
     * @return SearchResponse<Tenant>
     */
    @RequestMapping(value = "/tenant", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Progman Read" })
    @ResponseBody
    public SearchResponse<Tenant> searchTenant(final HttpServletRequest request, final HttpServletResponse response) {

        final TenantSearchRequest searchRequest = new TenantSearchRequest(request.getParameterMap());
        SearchResponse<Tenant> searchResponse;
        if (searchRequest.isValid()) {
            searchResponse = this.tenantService.searchTenants(searchRequest);
        } else {
            throw new RestException("tenant.search.invalidSearchCriteria");
        }
        return searchResponse;
    }

    /**
     * Can query the /tenantsBySearchVal endpoint to find tenants whose name or description contains the passed-in searchVal.
     * Valid query parameters are:
     * <ul>
     * <li>searchVal - value to search tenants by</li>
     * <li>page.page - page you want to retrieve (1-indexed)</li>
     * <li>page.size - size of the page you want to retrieve</li>
     * <li>page.sort - property that should be sorted by</li>
     * <li>page.sort.dir - direction that should be used for sorting</li>
     * </ul>
     * 
     * @param request HttpServletRequest
     * @param pageable Pageable
     * @return SearchResponse<Tenant>
     */
    @RequestMapping(value = "/tenantsBySearchVal", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Progman Read" })
    @ResponseBody
    public List<Tenant> findTenantsBySearchVal(final HttpServletRequest request, final Pageable pageable) {
        final String searchVal = request.getParameter("searchVal");
        final String type = request.getParameter("tenantType");
        final TenantType tenantType = StringUtils.isBlank(type) ? null : TenantType.valueOf(type);

        return this.tenantService.findByNameRegexOrDescriptionRegexAndType(searchVal, searchVal, tenantType, pageable);
    }

}

/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.domain;

import org.joda.time.DateTime;
import org.springframework.data.annotation.Transient;
import org.springframework.data.mongodb.core.mapping.Document;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@Document
@JsonIgnoreProperties(ignoreUnknown = true)
public class PropertyConfigAudit {

    private String id;
    private PropertyConfig propertyConfig;
    private DateTime auditTimestamp;
    private String auditUser;
    private AuditType auditType;

    @Transient
    private PropertyEntryDiff[] historyDiff;

    public PropertyConfigAudit() {
        // empty constructor
    }

    public PropertyConfigAudit(final PropertyConfig inPropertyConfig, final AuditType inAuditType, final String inAuditUser) {
        propertyConfig = inPropertyConfig;
        auditTimestamp = new DateTime();
        auditType = inAuditType;
        auditUser = inAuditUser;
    }

    /**
     * @return the id
     */
    public String getId() {
        return id;
    }

    /**
     * @param inId
     *        the id to set
     */
    public void setId(final String inId) {
        id = inId;
    }

    /**
     * @return the propertyConfig
     */
    public PropertyConfig getPropertyConfig() {
        return propertyConfig;
    }

    /**
     * @param inPropertyConfig
     *        the propertyConfig to set
     */
    public void setPropertyConfig(final PropertyConfig inPropertyConfig) {
        propertyConfig = inPropertyConfig;
    }

    /**
     * @return the auditTimestamp
     */
    public DateTime getAuditTimestamp() {
        return auditTimestamp;
    }

    /**
     * @param inAuditTimestamp
     *        the auditTimestamp to set
     */
    public void setAuditTimestamp(final DateTime inAuditTimestamp) {
        auditTimestamp = inAuditTimestamp;
    }

    /**
     * @return the auditUser
     */
    public String getAuditUser() {
        return auditUser;
    }

    /**
     * @param inAuditUser
     *        the auditUser to set
     */
    public void setAuditUser(final String inAuditUser) {
        auditUser = inAuditUser;
    }

    /**
     * @return the auditType
     */
    public AuditType getAuditType() {
        return auditType;
    }

    /**
     * @param inAuditType
     *        the auditType to set
     */
    public void setAuditType(final AuditType inAuditType) {
        auditType = inAuditType;
    }

    public PropertyEntryDiff[] getHistoryDiff() {
        if (historyDiff == null) {
            return null;
        } else {
            return historyDiff.clone();
        }
    }

    public void setHistoryDiff(final PropertyEntryDiff[] inHistoryDiff) {
        if (inHistoryDiff != null) {
            historyDiff = inHistoryDiff.clone();
        }
    }

    public enum AuditType {
        ADD, UPDATE, DELETE;
    }
}

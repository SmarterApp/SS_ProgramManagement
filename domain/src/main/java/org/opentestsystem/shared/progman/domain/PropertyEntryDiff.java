/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.domain;

import java.io.Serializable;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * key/value pair along with an indicator for encrypting the value
 */
public class PropertyEntryDiff implements Serializable {

    private static final long serialVersionUID = -3798045745457102313L;

    private boolean valueChanged;
    private boolean encryptChanged;

    private String oldPropertyKey;
    private String propertyKey;

    private String oldPropertyValue;
    private String propertyValue;

    private boolean oldEncrypt;
    private boolean encrypt;

    public enum DiffOper {
        EQ, CHG, ADD, DEL
    };

    public PropertyEntryDiff(final PropertyEntry oldEntry, final PropertyEntry newEntry, final String oldDecryptedValue, final String newDecyrptedValue) {
        if (oldEntry != null) {
            oldPropertyKey = oldEntry.getPropertyKey();
            oldPropertyValue = oldEntry.getPropertyValue();
            oldEncrypt = oldEntry.isEncrypt();
        }

        if (newEntry != null) {
            propertyKey = newEntry.getPropertyKey();
            propertyValue = newEntry.getPropertyValue();
            encrypt = newEntry.isEncrypt();
        }

        if (newEntry != null && oldEntry != null) {
            valueChanged = !propertyValue.equals(oldPropertyValue);
            encryptChanged = oldEncrypt != encrypt;
            if (valueChanged && !encryptChanged && oldEncrypt) {
                //if the value is different, and the old & new were encrypted, do a fancy compare
                //by decrypting old & new values & then marking as change if decrypted values are actually different
                valueChanged = !newDecyrptedValue.equals(oldDecryptedValue);
                if (valueChanged) {
                    propertyValue = newDecyrptedValue;
                    oldPropertyValue = oldDecryptedValue;
                }
            }
        }
    }

    /**
     * @return the propertyKey
     */
    public String getPropertyKey() {
        return propertyKey;
    }

    /**
     * @return the propertyValue
     */
    public String getPropertyValue() {
        return propertyValue;
    }

    public boolean isEncrypt() {
        return encrypt;
    }

    public DiffOper getEntryDiffOper() {
        DiffOper rval = DiffOper.EQ;
        if (oldPropertyKey == null) {
            rval = DiffOper.ADD;
        }
        if (propertyKey == null) {
            rval = DiffOper.DEL;
        }
        if (isValueChanged() || isEncryptChanged()) {
            rval = DiffOper.CHG;
        }
        return rval;
    }

    public boolean isValueChanged() {
        return valueChanged;
    }

    public boolean isEncryptChanged() {
        return encryptChanged;
    }

    public String getOldPropertyKey() {
        return oldPropertyKey;
    }

    public String getOldPropertyValue() {
        return oldPropertyValue;
    }

    public String getReadableEncrypted() {
        String encrypText;
        if (encrypt) {
            encrypText = "encrypted";
        } else {
            encrypText = "not encrypted";
        }
        return encrypText;
    }

    public String getReadableOldEncrypted() {
        String encrypText;
        if (oldEncrypt) {
            encrypText = "encrypted";
        } else {
            encrypText = "not encrypted";
        }
        return encrypText;
    }

    @Override
    public boolean equals(final Object obj) {
        return EqualsBuilder.reflectionEquals(this, obj);
    }

    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);
    }

    @Override
    public int hashCode() {
        return HashCodeBuilder.reflectionHashCode(this);
    }
}

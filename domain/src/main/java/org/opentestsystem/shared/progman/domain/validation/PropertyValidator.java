/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.domain.validation;

import java.util.List;
import java.util.Set;

import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

import org.opentestsystem.shared.progman.domain.PropertyEntry;
import org.springframework.util.CollectionUtils;

import com.google.common.collect.Sets;

/**
 * Validation implementation for validating property entries.
 * @author mckanth
 */
public class PropertyValidator implements ConstraintValidator<ValidProperty, List<PropertyEntry>> {

    @Override
    public void initialize(final ValidProperty constraintAnnotation) {
        //look... im empty
    }

    @Override
    public boolean isValid(final List<PropertyEntry> properties, final ConstraintValidatorContext context) {
        boolean isValid = true;
        if (!CollectionUtils.isEmpty(properties)) {
            Set<String> duplicateNames = Sets.newHashSet();
            Set<String> tempProps = Sets.newHashSet();
            for (PropertyEntry property : properties) {
                if (!tempProps.add(property.getPropertyKey())) {
                    duplicateNames.add(property.getPropertyKey());
                    isValid = false;
                    context.disableDefaultConstraintViolation();
                    context.buildConstraintViolationWithTemplate("Duplicate property names " + duplicateNames).addConstraintViolation();
                }
            }
        }
        return isValid;
    }
}

/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.domain;

import java.io.Serializable;
import java.util.List;

import javax.validation.Valid;

import org.hibernate.validator.constraints.Length;
import org.hibernate.validator.constraints.NotBlank;
import org.hibernate.validator.constraints.NotEmpty;
import org.opentestsystem.shared.progman.domain.validation.ValidProperty;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.CompoundIndexes;
import org.springframework.data.mongodb.core.mapping.Document;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Lists;

/**
 * Describes configuration information.
 */
@Document
@JsonIgnoreProperties(ignoreUnknown = true)
@CompoundIndexes(value = {@CompoundIndex(name = "unq_config_set", def = "{'name':1, 'envName':1}", unique = true) })
public class PropertyConfig implements Serializable {

    private static final int MAX_LENGTH = 60;
    private static final long serialVersionUID = -2281127304331546977L;
    private static final String GET_RESOURCE_NAME = "/propertyConfig/";
    public static final String ESCAPE_CHARACTER = "###";

    @Id
    private String id;

    @NotBlank(message = "propertyConfig.name.required")
    @Length(max = MAX_LENGTH, message = "propertyConfig.name.length")
    private String name;

    @NotBlank(message = "propertyConfig.envName.required")
    @Length(max = MAX_LENGTH, message = "propertyConfig.envName.length")
    private String envName;

    /**
     * Note, this is implemented as a list of helper object (@see PropertyEntry which is really just a tuple), rather
     * than a simple map, due to the desire to have a consistent elementName for the key and the value in support of
     * flexible searching
     */

    @NotEmpty(message = "propertyConfig.properties.required")
    @ValidProperty(message = "propertyEntry.invalid")
    @Valid
    private List<PropertyEntry> properties;

    public String getId() {
        return id;
    }

    public void setId(final String inId) {
        this.id = inId;
    }

    public String getName() {
        return name;
    }

    public void setName(final String inName) {
        this.name = inName;
    }

    public String getEnvName() {
        return envName;
    }

    public void setEnvName(final String inEnvName) {
        this.envName = inEnvName;
    }

    public List<PropertyEntry> getProperties() {
        return properties;
    }

    public void setProperties(final List<PropertyEntry> inProperties) {
        this.properties = inProperties;
    }

    @JsonProperty
    public String getUrl() {
        return GET_RESOURCE_NAME + this.id;
    }

    public void addProperty(final String key, final String inValue) {
        if (getProperties() == null) {
            properties = Lists.newArrayList();
        }
        properties.add(new PropertyEntry(key, inValue));
    }

    public void addProperty(final String key, final String inValue, final boolean encrypt) {
        if (getProperties() == null) {
            properties = Lists.newArrayList();
        }
        properties.add(new PropertyEntry(key, inValue, encrypt));
    }

    public void addProperty(final PropertyEntry propEntry) {
        if (getProperties() == null) {
            properties = Lists.newArrayList();
        }
        properties.add(propEntry);
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();

        for (PropertyEntry entry : properties) {
            builder.append(entry.toString());
            builder.append('\n');
        }

        String returnString = "";

        if (builder.length() >= 1) {
            returnString = builder.substring(0, builder.length() - 1);
        }

        // return the built string excluding the last line feed
        return returnString;
    }
}

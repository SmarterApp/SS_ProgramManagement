/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.domain.validation;

import static org.junit.Assert.assertEquals;

import java.util.List;
import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;

import org.junit.BeforeClass;
import org.junit.Test;
import org.opentestsystem.shared.progman.domain.Asset;
import org.opentestsystem.shared.progman.domain.Asset.AssetType;
import org.opentestsystem.shared.progman.domain.AssetGroup;
import org.opentestsystem.shared.progman.domain.Component;
import org.opentestsystem.shared.progman.domain.Tenant;

import com.google.common.collect.Lists;

public class AssetGroupValidationTest {

    private static Validator validator;

    @BeforeClass
    public static void initValidator() {
        validator = Validation.buildDefaultValidatorFactory().getValidator();
    }

    @Test
    public void testRequiredFields() {
        Set<ConstraintViolation<AssetGroup>> propErrors;

        AssetGroup assetGroup = new AssetGroup();
        propErrors = validator.validate(assetGroup);
        assertEquals("blank asset isn't valid, should have 2 required fields missing", 2, propErrors.size());
        propErrors.clear();

        assetGroup.setComponent(buildComponent());
        propErrors = validator.validate(assetGroup);
        assertEquals("asset is still missing 1 required fields", 1, propErrors.size());
        propErrors.clear();

        assetGroup.setTenant(buildTenant());
        propErrors = validator.validate(assetGroup);
        assertEquals("should be valid, required fields satisfied", 0, propErrors.size());
        propErrors.clear();

    }

    @Test
    public void testDuplicateAsset() {
        Set<ConstraintViolation<AssetGroup>> propErrors;
        AssetGroup assetGroup = new AssetGroup();
        assetGroup.setComponent(buildComponent());
        assetGroup.setTenant(buildTenant());
        List<Asset> assetList = Lists.newArrayList();
        assetList.add(buildAsset());
        // add another asset of same name
        assetList.add(buildAsset());
        assetGroup.setAssets(assetList);
        propErrors = validator.validate(assetGroup);
        assertEquals("duplicate asset names", 1, propErrors.size());
        propErrors.clear();
    }

    @Test
    public void testMultipleDuplicateAssets() {
        Set<ConstraintViolation<AssetGroup>> propErrors;
        AssetGroup assetGroup = new AssetGroup();
        assetGroup.setComponent(buildComponent());
        assetGroup.setTenant(buildTenant());

        List<Asset> assetList = Lists.newArrayList();
        assetList.add(buildAsset("name1"));
        assetList.add(buildAsset("name1"));
        assetList.add(buildAsset("name2"));
        assetList.add(buildAsset("name2"));
        assetGroup.setAssets(assetList);

        propErrors = validator.validate(assetGroup);
        assertEquals("duplicate asset names", 1, propErrors.size()); // should still only give 1 duplicate name error
        propErrors.clear();
    }

    @Test
    public void testDuplicateBlankAssetNames() {
        Set<ConstraintViolation<AssetGroup>> propErrors;
        AssetGroup assetGroup = new AssetGroup();
        assetGroup.setComponent(buildComponent());
        assetGroup.setTenant(buildTenant());

        List<Asset> assetList = Lists.newArrayList();
        assetList.add(buildAsset(""));
        assetList.add(buildAsset(""));
        assetList.add(buildAsset(""));
        assetGroup.setAssets(assetList);

        propErrors = validator.validate(assetGroup);
        assertEquals("should have 3 errors", 3, propErrors.size());
        for (ConstraintViolation<AssetGroup> propError : propErrors) {
            // should only give the asset name required error(not duplicate name error)
            assertEquals("should only violate asset name required contraint", "asset.name.required", propError.getMessage());
        }
        propErrors.clear();
    }

    private Asset buildAsset() {
        Asset asset = new Asset();
        asset.setName("css");
        asset.setType(AssetType.PROPERTY);
        asset.setProperty("color:red");
        return asset;
    }

    private Asset buildAsset(final String name) {
        Asset asset = new Asset();
        asset.setName(name);
        asset.setType(AssetType.PROPERTY);
        asset.setProperty("color:red");
        return asset;
    }

    private Component buildComponent() {
        final Component component = new Component();
        component.setId("2222");
        component.setName("overseer");
        return component;
    }

    private Tenant buildTenant() {
        final Tenant tenant = new Tenant();
        tenant.setId("1111");
        tenant.setName("overseer");
        return tenant;
    }
}
